{"version":3,"sources":["../../src/services/gemini.js"],"names":["session","options","orderOptions","method","uri","url","json","body","request","nonce","client_order_id","symbol","config","gemini","currencyPair","amount","price","side","action","type","orderType","orderResults","newOrder","GeminiService","logger","defaults","headers","getOrderBook","requestOptions","orderBook","timestamp","bids","map","bidLevel","asks","askLevel","console","log","executeTrade","tradeDetails","info","quantity","rate"],"mappings":";;;;;;;yDAGA,iBAAwBA,OAAxB,EAAiCC,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAEcC,oCAFd,GAE6B;AACjBC,oCAAQ,MADS;AAEjBC,iCAAQH,QAAQI,GAAhB,eAFiB;AAGjBC,kCAAM,IAHW;AAIjBC,kCAAM;AACFC,yCAAS,eADP,EACwB;AAC1BC,uCAAO,SAFL;AAGFC,iDAAiB,kBAHf;AAIFC,wCAAQC,OAAOC,MAAP,CAAcC,YAJpB;AAKFC,wCAAQd,QAAQc,MALd;AAMFC,uCAAOf,QAAQe,KANb;AAOFC,sCAAMhB,QAAQiB,MAPZ;AAQFC,sCAAMP,OAAOC,MAAP,CAAcO;AARlB;AAJW,yBAF7B;AAAA;AAAA,+BAmBiCpB,QAAQE,YAAR,CAnBjC;;AAAA;AAmBYmB,oCAnBZ;AAAA,yDAyCeA,YAzCf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeC,Q;;;;;AAHf;;;;;;;;;;IAgDqBC,a,GAEjB,uBAAYtB,OAAZ,EAAoB;AAAA;;AAAA;;AAChB,SAAKA,OAAL,GAAeA,WAAW,EAA1B;AACA,SAAKuB,MAAL,GAAcvB,QAAQuB,MAAtB;AACA,SAAKxB,OAAL,GAAe,yBAAGyB,QAAH,CAAY;AACvBnB,cAAM,IADiB;AAEvBoB,iBAAS;AACL,0BAAc;AADT;AAFc,KAAZ,CAAf;AAMH,C;;;;;SAEDC,Y,6CAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEDC,sCAFC,GAEgB;AACnBxB,iCAAQ,MAAKH,OAAL,CAAaI,GAArB;AADmB,yBAFhB;AAAA;AAAA,+BAMe,MAAKL,OAAL,CAAa4B,cAAb,CANf;;AAAA;AAMHC,iCANG;AAOHC,iCAPG,GAOSD,UAAUE,IAAV,CAAe,CAAf,EAAkBD,SAP3B;AASDC,4BATC,GASMF,UAAUE,IAAV,CAAeC,GAAf,CAAmB,UAACC,QAAD,EAAc;AAC1C,mCAAO;AACHjB,uCAAOiB,SAASjB,KADb;AAEHD,wCAAQkB,SAASlB;AAFd,6BAAP;AAIH,yBALY,CATN;AAgBDmB,4BAhBC,GAgBML,UAAUK,IAAV,CAAeF,GAAf,CAAmB,UAACG,QAAD,EAAc;AAC1C,mCAAO;AACHnB,uCAAOmB,SAASnB,KADb;AAEHD,wCAAQoB,SAASpB;AAFd,6BAAP;AAIH,yBALY,CAhBN;AAAA,0DAuBA;AACHmB,sCADG;AAEHH,sCAFG;AAGHD;AAHG,yBAvBA;;AAAA;AAAA;AAAA;;AA8BPM,gCAAQC,GAAR;;AA9BO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;SAmCfC,Y;8DAAe,kBAAOC,YAAP;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEV;AACD;AACA;AACA;;AAEA;AACA,kCAAKf,MAAL,CAAYgB,IAAZ,cAA4BD,aAAarB,MAAzC,6BAAuEqB,aAAaE,QAApF,sBAA6GF,aAAaG,IAA1H;;AAIIrB,wCAZO,GAYQC,SAAS,MAAKtB,OAAd,EAAuBC,OAAvB,CAZR;;AAcX;AACA;;;AAQA;AACA;AACA;;;;;;;;AAzBW,8DAkCJoB,YAlCI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,S;;;;;;;;kBAhDEE,a","file":"gemini.js","sourcesContent":["import rp from 'request-promise'\n\n\nasync function newOrder(session, options){\n   \n        const orderOptions = {\n            method: 'POST',\n            uri: `${options.url}/order/new`,\n            json: true,\n            body: {\n                request: \"/v1/order/new\", //is this needed?\n                nonce: '<nonce>',\n                client_order_id: \"20150102-4738721\",\n                symbol: config.gemini.currencyPair,       \n                amount: options.amount,        \n                price: options.price,\n                side: options.action,            \n                type: config.gemini.orderType,  \n                // options: [\"maker-or-cancel\"] \n            }\n        }\n\n        let orderResults = await session(orderOptions)\n\n        //return the object below\n        // {\n        //     // These are the same fields returned by order/status\n        //     \"order_id\": \"22333\",\n        //     \"client_order_id\": \"20150102-4738721\",\n        //     \"symbol\": \"btcusd\",\n        //     \"price\": \"34.23\",\n        //     \"avg_execution_price\": \"34.24\",\n        //     \"side\": \"buy\",\n        //     \"type\": \"exchange limit\",\n        //     \"timestamp\": \"128938491\",\n        //     \"timestampms\": 128938491234,\n        //     \"is_live\": true,\n        //     \"is_cancelled\": false,\n        //     \"options\": [\"maker-or-cancel\"], \n        //     \"executed_amount\": \"12.11\",\n        //     \"remaining_amount\": \"16.22\",\n        //     \"original_amount\": \"28.33\"\n        // }\n\n        return orderResults\n}\n\n\nexport default class GeminiService {\n\n    constructor(options){\n        this.options = options || {}\n        this.logger = options.logger\n        this.session = rp.defaults({\n            json: true,\n            headers: {\n                'User-Agent': 'Request-Promise'\n            }\n        })\n    }\n\n    getOrderBook = async () => {\n        try{\n            const requestOptions = {\n                uri: `${this.options.url}/book/ethusd`,\n            }\n\n            let orderBook = await this.session(requestOptions)\n            let timestamp = orderBook.bids[0].timestamp\n\n            const bids = orderBook.bids.map((bidLevel) => {\n                return {\n                    price: bidLevel.price,\n                    amount: bidLevel.amount\n                }\n            })\n\n            const asks = orderBook.asks.map((askLevel) => {\n                return {\n                    price: askLevel.price,\n                    amount: askLevel.amount\n                }\n            })\n\n            return {\n                asks,\n                bids,\n                timestamp\n            }\n\n        } catch(err){\n            console.log(err)\n        }\n\n    }\n\n    executeTrade = async (tradeDetails) => {\n\n         // this code should attempt to place limit order that wont incur transaction fees\n        // perhaps place buy orders at prices very close to the ask price but not in a current slot so that no taker fee is taken\n        // likewise place sell orders very close to the bid price but not in a current slot so that no taker fee is taken\n        // even if it is only successful some of the time it will help\n\n        // place market trade on gdax \n        this.logger.info(`placing ${tradeDetails.action} trade on Gemini for ${tradeDetails.quantity} ethereum at $${tradeDetails.rate}/eth`)\n\n\n\n        let orderResults = newOrder(this.session, options)\n\n        // logic here to retry or whatever depending on results of trade\n        //logic here to figure out what price to place order at so as to get filled?\n        \n\n        \n\n\n\n\n        //cancel order\n        // POST https://api.gemini.com/v1/order/cancel\n        /*{\n            // Standard headers\n            \"request\": \"/v1/order/order/cancel\",\n            \"nonce\": <nonce>,\n\n            // Request-specific items\n            \"order_id\": 12345\n        }*/\n\n        return orderResults\n\n        return Promise.resolve('trade completed for GDAX')\n    }\n\n}"]}