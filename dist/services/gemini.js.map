{"version":3,"sources":["../../src/services/gemini.js"],"names":["createRequestConfig","key","secret","payload","encodedPayload","Buffer","JSON","stringify","toString","signature","createHmac","update","digest","GeminiService","options","requestPrivate","endpoint","params","Error","requestUrl","baseUrl","nonce","Date","now","request","config","requestOptions","method","uri","headers","session","reject","requestPublic","body","getOrderBook","orderBook","timestamp","bids","map","bidLevel","price","amount","asks","askLevel","executeTrade","tradeDetails","logger","info","action","quantity","rate","orderParams","client_order_id","symbol","side","type","newOrder","orderResults","tradeCompleted","tradeCompletedDetails","delay","orderStatus","order_id","tradeStatus","executed_amount","original_amount","availableBalances","orderId","err","subdomain","sandbox","defaults","json"],"mappings":"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","file":"gemini.js","sourcesContent":["import rp from 'request-promise'\nimport crypto from 'crypto';\nimport shortid from 'shortid';\nimport Promise from 'bluebird'\n\n\nfunction createRequestConfig({ key, secret, payload }){\n\n  const encodedPayload = (new Buffer(JSON.stringify(payload)))\n    .toString(`base64`);\n\n  const signature = crypto\n    .createHmac(`sha384`, secret)\n    .update(encodedPayload)\n    .digest(`hex`);\n\n  return {\n      'X-GEMINI-APIKEY': key,\n      'X-GEMINI-PAYLOAD': encodedPayload,\n      'X-GEMINI-SIGNATURE': signature,\n  };\n}\n\n\nexport default class GeminiService {\n\n    constructor(options){\n        this.options = options || {}\n        this.logger = this.options.logger\n        const subdomain = this.options.sandbox ? `api.sandbox` : `api`;\n        this.baseUrl = `https://${subdomain}.gemini.com/v1`;\n        this.session = rp.defaults({\n            json: true,\n            headers: {\n                'User-Agent': 'Request-Promise'\n            }\n        })\n    }\n\n    requestPrivate = async(endpoint, params = {}) => {\n        try{\n            if (!this.options.key || !this.options.secret) {\n                throw new Error(\n                    `API key and secret key required to use authenticated methods`,\n                );\n            }\n\n            const requestUrl = `${this.baseUrl}${endpoint}`\n\n            const payload = {\n                nonce: Date.now(),\n                request: `/v1${endpoint}`,\n                ...params,\n            };\n\n\n            const config = createRequestConfig({\n                payload,\n                key: this.options.key,\n                secret: this.options.secret,\n            });\n\n            const requestOptions = {\n                method: 'POST',\n                uri: requestUrl,\n                headers: config\n            }\n\n            return await this.session(requestOptions)\n        } catch(err) {\n            return Promise.reject(`gemini requestPrivate |> ${err}`)\n        }\n    }\n\n    requestPublic = async (endpoint, params = {}) => {\n        try {\n            const requestOptions = {\n                method: 'GET',\n                uri: `${this.baseUrl}${endpoint}`,\n                body: {\n                    ...params\n                }\n            }\n\n            return await this.session(requestOptions) \n        } catch(err) {\n            return Promise.reject(`gemini requestPublic |> ${err}`)\n        } \n    }\n\n    getOrderBook = async () => {\n        try{\n            let orderBook = await this.requestPublic(`/book/ethusd`, {})\n\n            let timestamp = orderBook.bids[0].timestamp\n\n            const bids = orderBook.bids.map((bidLevel) => {\n                return {\n                    price: bidLevel.price,\n                    amount: bidLevel.amount\n                }\n            })\n\n            const asks = orderBook.asks.map((askLevel) => {\n                return {\n                    price: askLevel.price,\n                    amount: askLevel.amount\n                }\n            })\n\n            return { asks, bids,timestamp}\n        } catch(err){\n            return Promise.reject(`gemini getOrderBook |> ${err}`)\n        }\n\n    }\n\n    executeTrade = async (tradeDetails) => {\n        try{\n            this.logger.info(`placing ${tradeDetails.action} trade on Gemini for ${tradeDetails.quantity} ethereum at $${tradeDetails.rate}/eth`)\n        \n            let orderParams = { \n                client_order_id: \"20150102-4738721\", \n                symbol: 'ethusd',       \n                amount: tradeDetails.quantity,        \n                price: tradeDetails.rate,\n                side: tradeDetails.action,\n                type: 'exchange limit'\n            }\n\n            let orderResults = await this.newOrder(orderParams)\n            \n            let tradeCompleted = false\n            let tradeCompletedDetails\n\n            while(!tradeCompleted){\n                await Promise.delay(1000)\n                let tradeStatus = await this.orderStatus(orderResults.order_id)\n                if(tradeStatus.executed_amount == tradeStatus.original_amount){\n                    tradeCompleted = true\n                    tradeCompletedDetails = tradeStatus\n                }\n            }\n            return tradeCompletedDetails\n\n        } catch(err){\n            return Promise.reject(`gemini executeTrade |> ${err}`)\n        }\n    }\n\n    newOrder = async (params = {}) => {\n        try {\n            return await this.requestPrivate(`/order/new`, {\n                client_order_id: shortid(),\n                type: `exchange limit`,\n                ...params,\n            })\n        } catch(err){\n            return Promise.reject(`gemini newOrder |> ${err}`)\n        }\n        \n    }\n\n    availableBalances = async () => {\n        try {\n            return this.requestPrivate(`/balances`)\n        } catch(err){\n            return Promise.reject(`gemini availableBalances |> ${err}`)\n        }\n    }\n\n    orderStatus = (orderId) => {\n        try {\n            return this.requestPrivate(`/order/status`, { order_id: orderId })\n        } catch(err){\n            return Promise.reject(`gemini orderStatus |> ${err}`)\n        }\n    }\n}"]}