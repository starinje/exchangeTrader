{"version":3,"sources":["../../src/services/gemini.js"],"names":["createRequestConfig","key","secret","payload","encodedPayload","Buffer","JSON","stringify","toString","signature","createHmac","update","digest","GeminiService","options","requestPrivate","endpoint","params","Error","requestUrl","baseUrl","nonce","Date","now","request","config","requestOptions","method","uri","headers","session","reject","requestPublic","body","getOrderBook","orderBook","timestamp","bids","map","bidLevel","price","amount","asks","askLevel","executeTradeOld","tradeDetails","logger","info","action","quantity","orderParams","client_order_id","symbol","rate","side","type","newOrder","orderResults","tradeCompleted","delay","orderStatus","order_id","tradeStatus","executed_amount","original_amount","orderHistory","tradeSummary","executeTrade","positionChange","gemini","counterPrice","gdax","rateDelta","Math","abs","tradeProfitable","finalOrderResults","tradeQuantity","lowestSellPriceLevel","find","ask","parseFloat","console","log","highestBuyPriceLevel","toFixed","process","exit","is_cancelled","timeStart","utc","timeExpired","timeSinceTradePlaced","duration","diff","asMinutes","orderFillTime","cancelOrders","availableBalances","orderId","err","trades","orderTrades","filter","trade","fee","numberOfTrades","forEach","fee_amount","averagePrice","subdomain","sandbox","defaults","json"],"mappings":"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","file":"gemini.js","sourcesContent":["import rp from 'request-promise'\nimport crypto from 'crypto';\nimport shortid from 'shortid';\nimport Promise from 'bluebird'\nimport moment from 'moment'\n\n\nfunction createRequestConfig({ key, secret, payload }){\n\n  const encodedPayload = (new Buffer(JSON.stringify(payload)))\n    .toString(`base64`);\n\n  const signature = crypto\n    .createHmac(`sha384`, secret)\n    .update(encodedPayload)\n    .digest(`hex`);\n\n  return {\n      'X-GEMINI-APIKEY': key,\n      'X-GEMINI-PAYLOAD': encodedPayload,\n      'X-GEMINI-SIGNATURE': signature,\n  };\n}\n\n\nexport default class GeminiService {\n\n    constructor(options){\n        this.options = options || {}\n        this.logger = this.options.logger\n        const subdomain = this.options.sandbox ? `api.sandbox` : `api`;\n        this.baseUrl = `https://${subdomain}.gemini.com/v1`;\n        this.session = rp.defaults({\n            json: true,\n            headers: {\n                'User-Agent': 'Request-Promise'\n            }\n        })\n    }\n\n    requestPrivate = async(endpoint, params = {}) => {\n        try{\n            if (!this.options.key || !this.options.secret) {\n                throw new Error(\n                    `API key and secret key required to use authenticated methods`,\n                );\n            }\n\n            const requestUrl = `${this.baseUrl}${endpoint}`\n\n            const payload = {\n                nonce: Date.now(),\n                request: `/v1${endpoint}`,\n                ...params,\n            };\n\n\n            const config = createRequestConfig({\n                payload,\n                key: this.options.key,\n                secret: this.options.secret,\n            });\n\n            const requestOptions = {\n                method: 'POST',\n                uri: requestUrl,\n                headers: config\n            }\n\n            return await this.session(requestOptions)\n        } catch(err) {\n            return Promise.reject(`gemini requestPrivate |> ${err}`)\n        }\n    }\n\n    requestPublic = async (endpoint, params = {}) => {\n        try {\n            const requestOptions = {\n                method: 'GET',\n                uri: `${this.baseUrl}${endpoint}`,\n                body: {\n                    ...params\n                }\n            }\n\n            return await this.session(requestOptions) \n        } catch(err) {\n            return Promise.reject(`gemini requestPublic |> ${err}`)\n        } \n    }\n\n    getOrderBook = async () => {\n        try{\n            let orderBook = await this.requestPublic(`/book/ethusd`, {})\n\n            let timestamp = orderBook.bids[0].timestamp\n\n            const bids = orderBook.bids.map((bidLevel) => {\n                return {\n                    price: bidLevel.price,\n                    amount: bidLevel.amount\n                }\n            })\n\n            const asks = orderBook.asks.map((askLevel) => {\n                return {\n                    price: askLevel.price,\n                    amount: askLevel.amount\n                }\n            })\n\n            return { asks, bids,timestamp}\n        } catch(err){\n            return Promise.reject(`gemini getOrderBook |> ${err}`)\n        }\n\n    }\n\n    executeTradeOld = async (tradeDetails, orderBook) => {\n        try{\n            orderBook = await this.getOrderBook()\n            this.logger.info('retrieving latest order book from gemini')\n            let price\n\n            switch(tradeDetails.action){\n                case 'buy':\n                    price = orderBook.bids[1].price\n                    break\n                case 'sell':\n                    price = orderBook.asks[1].price\n                    break\n            }\n\n            this.logger.info(`placing ${tradeDetails.action} trade on Gemini for ${tradeDetails.quantity} ethereum at $${price}/eth`)\n        \n            let orderParams = { \n                client_order_id: \"20150102-4738721\", \n                symbol: 'ethusd',       \n                amount: tradeDetails.quantity,        \n                price: tradeDetails.rate,\n                side: tradeDetails.action,\n                type: 'exchange limit',\n            }\n\n            let orderResults = await this.newOrder(orderParams)\n            \n            let tradeCompleted = false\n\n            while(!tradeCompleted){\n                await Promise.delay(1000)\n                let tradeStatus = await this.orderStatus(orderResults.order_id)\n                if(tradeStatus.executed_amount == tradeStatus.original_amount){\n                    tradeCompleted = true\n                }\n            }\n\n            let tradeSummary = await this.orderHistory(orderResults.order_id)\n\n            return {...tradeSummary, action: tradeDetails.action}\n\n        } catch(err){\n            return Promise.reject(`gemini executeTrade |> ${err}`)\n        }\n    }\n\n    executeTrade = async (positionChange) => {\n        try{\n\n            const tradeDetails = positionChange.gemini\n            const counterPrice = positionChange.gdax.rate\n            const rateDelta = Math.abs(positionChange.gdax.rate - positionChange.gemini.rate)\n\n            let tradeCompleted = false\n            let tradeProfitable = true\n\n            let finalOrderResults\n            let price\n            let tradeQuantity = tradeDetails.quantity\n\n            while(!tradeCompleted && tradeProfitable){\n\n                \n\n                let orderBook = await this.getOrderBook()\n                \n                switch(tradeDetails.action){\n                case 'buy':\n                    // let lowestSellPrice = parseFloat(orderBook.asks[0].price)\n                    // price = lowestSellPrice - .01\n\n                    // let highestBuyPrice = parseFloat(orderBook.bids[0].price)\n                    // price = highestBuyPrice \n\n                    let lowestSellPriceLevel = orderBook.asks.find((ask) => {\n                        return parseFloat(ask.amount) >= tradeQuantity\n                    })\n\n                    price = parseFloat(lowestSellPriceLevel.price)\n                    console.log(`gemini buy price is: ${price}`)\n\n                    if(price >= counterPrice){ //-(rateDelta/2)\n                        tradeProfitable = false\n                        continue\n                    }\n                    break\n                case 'sell':\n                    // let highestBuyPrice = parseFloat(orderBook.bids[0].price)\n                    // price = highestBuyPrice + .01\n\n                    // let lowestSellPrice = parseFloat(orderBook.asks[0].price)\n                    // price = lowestSellPrice\n\n                    let highestBuyPriceLevel = orderBook.bids.find((ask) => {\n                        return parseFloat(ask.amount) >= tradeQuantity\n                    })\n\n                    price = parseFloat(highestBuyPriceLevel.price)\n                    console.log(`gemini sell price is: ${price}`)\n\n                    if(price <= counterPrice){ //+(rateDelta/2)\n                        tradeProfitable = false\n                        continue\n                    }\n                    break\n                }\n\n                price = price.toFixed(2).toString()\n\n                this.logger.info(`placing ${tradeDetails.action} trade on Gemini for ${tradeDetails.quantity} ethereum at $${price}/eth`)\n            \n                let orderParams = { \n                    client_order_id: \"20150102-4738721\", \n                    symbol: 'ethusd',       \n                    amount: tradeQuantity,        \n                    price: price,\n                    side: tradeDetails.action,\n                    type: 'exchange limit',\n                    //options: ['maker-or-cancel']\n                }\n\n                if(parseFloat(orderParams.price) < 250){\n                    this.logger.info(`failed gemini price sanity check. price: ${orderParams.price} `)\n                    process.exit()\n                }\n\n                let orderResults = await this.newOrder(orderParams)\n                console.log(`gemini order results: ${JSON.stringify(orderResults)}`)\n\n                if(orderResults.is_cancelled){\n                    this.logger.info('gemini order could not be submitted')\n                    this.logger.info(orderResults)\n                    continue\n                }\n\n                await Promise.delay(1000)\n\n                let timeStart = moment.utc(new Date())\n                let timeExpired = false\n\n                this.logger.info(`gemini order entered - going into check status loop...`)\n                while(!timeExpired && !tradeCompleted){\n                    await Promise.delay(1000)\n                    let now = moment.utc(new Date())\n                    let timeSinceTradePlaced = moment.duration(now.diff(timeStart))\n\n                    let tradeStatus = await this.orderStatus(orderResults.order_id)\n                    if(tradeStatus.executed_amount == tradeStatus.original_amount){\n                        tradeCompleted = true\n                        finalOrderResults = orderResults\n                        continue\n                    } else {\n                        tradeQuantity = parseFloat(tradeStatus.original_amount) - parseFloat(tradeStatus.executed_amount)\n                    }\n\n                    if(timeSinceTradePlaced.asMinutes() > this.options.orderFillTime){\n                        this.logger.info(`time has expired trying to ${tradeDetails.action} ${tradeDetails.quantity} ethereum on gemini at ${price}/eth, canceling order`)\n                        await this.cancelOrders()\n                        timeExpired = true\n                    }\n                }\n            }\n\n            let tradeSummary\n\n            if(tradeCompleted){\n                tradeSummary = await this.orderHistory(finalOrderResults.order_id)\n                return {...tradeSummary, action: tradeDetails.action}\n            } else if(!tradeProfitable){\n                this.logger.info(`${tradeDetails.action} on gemini for ${tradeDetails.quantity} ethereum at ${price}/eth was unsuccesful - order book no longer profitable`)\n                process.exit()\n            }\n        } catch(err){\n            //this.logger.info(`gemini executeTrade |> ${err}`)\n            //return\n            return Promise.reject(`gemini executeTrade |> ${err}`)\n        }\n    }\n\n    newOrder = async (params = {}) => {\n        try {\n            return this.requestPrivate(`/order/new`, {\n                client_order_id: shortid(),\n                type: `exchange limit`,\n                ...params,\n            })\n        } catch(err){\n            return Promise.reject(`gemini newOrder |> ${err}`)\n        }\n        \n    }\n\n    cancelOrders = async (params = {}) => {\n        try {\n            return this.requestPrivate(`/order/cancel/all`)\n        } catch(err){\n            return Promise.reject(`gemini cancelOrders |> ${err}`)\n        }\n        \n    }\n\n    availableBalances = async () => {\n        try {\n            return this.requestPrivate(`/balances`)\n        } catch(err){\n            return Promise.reject(`gemini availableBalances |> ${err}`)\n        }\n    }\n\n    orderStatus = (orderId) => {\n        try {\n            return this.requestPrivate(`/order/status`, { order_id: orderId })\n        } catch(err){\n            return Promise.reject(`gemini orderStatus |> ${err}`)\n        }\n    }\n\n    orderHistory = async (orderId) => {\n        try {\n            let trades = await this.requestPrivate(`/mytrades`, { symbol: 'ETHUSD'} )\n            let orderTrades = trades.filter((trade) =>{\n                return trade.order_id == orderId\n            })\n\n            let fee = 0\n            let amount = 0\n            let price = 0\n            let numberOfTrades = 0\n\n            orderTrades.forEach((trade) => {\n                fee = parseFloat(trade.fee_amount) + fee\n                amount = parseFloat(trade.amount) + amount\n                price = parseFloat(trade.price) + price\n                numberOfTrades = numberOfTrades + 1\n            })\n\n            let averagePrice = price / numberOfTrades\n\n            let tradeSummary = {\n                fee,\n                amount,\n                price: averagePrice\n            }\n\n            return tradeSummary\n        } catch(err){\n            this.logger.info(`gemini orderStatus |> ${err}`)\n            return Promise.reject(`gemini orderStatus |> ${err}`)\n        }\n    }\n}"]}