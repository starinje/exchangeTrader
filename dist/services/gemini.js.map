{"version":3,"sources":["../../src/services/gemini.js"],"names":["createRequestConfig","key","secret","payload","encodedPayload","Buffer","JSON","stringify","toString","signature","createHmac","update","digest","GeminiService","options","requestPrivate","endpoint","params","Error","requestUrl","baseUrl","nonce","Date","now","request","config","requestOptions","method","uri","headers","session","reject","requestPublic","body","getOrderBook","orderBook","timestamp","bids","map","bidLevel","price","amount","asks","askLevel","executeTradeWorking","tradeDetails","logger","info","action","quantity","orderParams","client_order_id","symbol","rate","side","type","newOrder","orderResults","tradeCompleted","delay","orderStatus","order_id","tradeStatus","executed_amount","original_amount","orderHistory","tradeSummary","executeTrade","positionChange","gemini","counterPrice","gdax","rateDelta","Math","abs","tradeProfitable","finalOrderResults","lowestSellPrice","parseFloat","highestBuyPrice","is_cancelled","timeStart","utc","timeExpired","timeSinceTradePlaced","duration","diff","asMinutes","orderFillTime","cancelOrders","process","exit","console","log","availableBalances","orderId","err","trades","orderTrades","filter","trade","fee","numberOfTrades","forEach","fee_amount","averagePrice","subdomain","sandbox","defaults","json"],"mappings":"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","file":"gemini.js","sourcesContent":["import rp from 'request-promise'\nimport crypto from 'crypto';\nimport shortid from 'shortid';\nimport Promise from 'bluebird'\nimport moment from 'moment'\n\n\nfunction createRequestConfig({ key, secret, payload }){\n\n  const encodedPayload = (new Buffer(JSON.stringify(payload)))\n    .toString(`base64`);\n\n  const signature = crypto\n    .createHmac(`sha384`, secret)\n    .update(encodedPayload)\n    .digest(`hex`);\n\n  return {\n      'X-GEMINI-APIKEY': key,\n      'X-GEMINI-PAYLOAD': encodedPayload,\n      'X-GEMINI-SIGNATURE': signature,\n  };\n}\n\n\nexport default class GeminiService {\n\n    constructor(options){\n        this.options = options || {}\n        this.logger = this.options.logger\n        const subdomain = this.options.sandbox ? `api.sandbox` : `api`;\n        this.baseUrl = `https://${subdomain}.gemini.com/v1`;\n        this.session = rp.defaults({\n            json: true,\n            headers: {\n                'User-Agent': 'Request-Promise'\n            }\n        })\n    }\n\n    requestPrivate = async(endpoint, params = {}) => {\n        try{\n            if (!this.options.key || !this.options.secret) {\n                throw new Error(\n                    `API key and secret key required to use authenticated methods`,\n                );\n            }\n\n            const requestUrl = `${this.baseUrl}${endpoint}`\n\n            const payload = {\n                nonce: Date.now(),\n                request: `/v1${endpoint}`,\n                ...params,\n            };\n\n\n            const config = createRequestConfig({\n                payload,\n                key: this.options.key,\n                secret: this.options.secret,\n            });\n\n            const requestOptions = {\n                method: 'POST',\n                uri: requestUrl,\n                headers: config\n            }\n\n            return await this.session(requestOptions)\n        } catch(err) {\n            return Promise.reject(`gemini requestPrivate |> ${err}`)\n        }\n    }\n\n    requestPublic = async (endpoint, params = {}) => {\n        try {\n            const requestOptions = {\n                method: 'GET',\n                uri: `${this.baseUrl}${endpoint}`,\n                body: {\n                    ...params\n                }\n            }\n\n            return await this.session(requestOptions) \n        } catch(err) {\n            return Promise.reject(`gemini requestPublic |> ${err}`)\n        } \n    }\n\n    getOrderBook = async () => {\n        try{\n            let orderBook = await this.requestPublic(`/book/ethusd`, {})\n\n            let timestamp = orderBook.bids[0].timestamp\n\n            const bids = orderBook.bids.map((bidLevel) => {\n                return {\n                    price: bidLevel.price,\n                    amount: bidLevel.amount\n                }\n            })\n\n            const asks = orderBook.asks.map((askLevel) => {\n                return {\n                    price: askLevel.price,\n                    amount: askLevel.amount\n                }\n            })\n\n            return { asks, bids,timestamp}\n        } catch(err){\n            return Promise.reject(`gemini getOrderBook |> ${err}`)\n        }\n\n    }\n\n    executeTradeWorking = async (tradeDetails, orderBook) => {\n        try{\n            orderBook = await this.getOrderBook()\n            this.logger.info('retrieving latest order book from gemini')\n            let price\n\n            switch(tradeDetails.action){\n                case 'buy':\n                    price = orderBook.bids[1].price\n                    break\n                case 'sell':\n                    price = orderBook.asks[1].price\n                    break\n            }\n\n            this.logger.info(`placing ${tradeDetails.action} trade on Gemini for ${tradeDetails.quantity} ethereum at $${price}/eth`)\n        \n            let orderParams = { \n                client_order_id: \"20150102-4738721\", \n                symbol: 'ethusd',       \n                amount: tradeDetails.quantity,        \n                price: tradeDetails.rate,\n                side: tradeDetails.action,\n                type: 'exchange limit',\n            }\n\n            let orderResults = await this.newOrder(orderParams)\n            \n            let tradeCompleted = false\n\n            while(!tradeCompleted){\n                await Promise.delay(1000)\n                let tradeStatus = await this.orderStatus(orderResults.order_id)\n                if(tradeStatus.executed_amount == tradeStatus.original_amount){\n                    tradeCompleted = true\n                }\n            }\n\n            let tradeSummary = await this.orderHistory(orderResults.order_id)\n\n            return {...tradeSummary, action: tradeDetails.action}\n\n        } catch(err){\n            return Promise.reject(`gemini executeTrade |> ${err}`)\n        }\n    }\n\n    executeTrade = async (positionChange) => {\n        try{\n\n            const tradeDetails = positionChange.gemini\n            const counterPrice = positionChange.gdax.rate\n            const rateDelta = Math.abs(positionChange.gdax.rate - positionChange.gemini.rate)\n            let tradeCompleted = false\n            let tradeProfitable = true\n            let finalOrderResults\n            let price\n\n            while(!tradeCompleted && tradeProfitable){\n\n                let orderBook = await this.getOrderBook()\n                \n\n                switch(tradeDetails.action){\n                case 'buy':\n                    //price = orderBook.bids[0].price\n                    let lowestSellPrice = parseFloat(orderBook.asks[0].price)\n                    price = lowestSellPrice - .01\n                    if(price >= counterPrice-(rateDelta/2)){\n                        tradeProfitable = false\n                        continue\n                    }\n                    break\n                case 'sell':\n                    let highestBuyPrice = parseFloat(orderBook.bids[0].price)\n                    price = highestBuyPrice + .01\n                    if(price <= counterPrice+(rateDelta/2)){\n                        tradeProfitable = false\n                        continue\n                    }\n                    break\n                }\n\n                this.logger.info(`placing ${tradeDetails.action} trade on Gemini for ${tradeDetails.quantity} ethereum at $${price}/eth`)\n            \n                let orderParams = { \n                    client_order_id: \"20150102-4738721\", \n                    symbol: 'ethusd',       \n                    amount: tradeDetails.quantity,        \n                    price: price,\n                    side: tradeDetails.action,\n                    type: 'exchange limit',\n                    options: ['maker-or-cancel']\n                }\n\n                let orderResults = await this.newOrder(orderParams)\n\n                if(orderResults.is_cancelled){\n                    continue\n                }\n\n                let timeStart = moment.utc(new Date())\n                let timeExpired = false\n\n                this.logger.info(`order entered - going into check status loop...`)\n                while(!timeExpired && !tradeCompleted){\n                    await Promise.delay(1000)\n                    let now = moment.utc(new Date())\n                    let timeSinceTradePlaced = moment.duration(now.diff(timeStart))\n                    if(timeSinceTradePlaced.asMinutes() > this.options.orderFillTime){\n                        this.logger.info(`time has expired trying to ${tradeDetails.action} ${tradeDetails.quantity} ethereum at ${price}/eth, canceling order`)\n                        await this.cancelOrders()\n                        timeExpired = true\n                        continue\n                    }\n                    let tradeStatus = await this.orderStatus(orderResults.order_id)\n                    if(tradeStatus.executed_amount == tradeStatus.original_amount){\n                        tradeCompleted = true\n                        finalOrderResults = orderResults\n                    }\n                }\n                await Promise.delay(1000)\n            }\n\n            let tradeSummary\n\n            if(tradeCompleted){\n                tradeSummary = await this.orderHistory(finalOrderResults.order_id)\n                return {...tradeSummary, action: tradeDetails.action}\n            } else if(!tradeProfitable){\n                this.logger.info(`${tradeDetails.action} on gemini for ${tradeDetails.quantity} ethereum at ${price}/eth was unsuccesful - order book no longer profitable`)\n                process.exit()\n            }\n        } catch(err){\n            console.log(err)\n            return\n            //return Promise.reject(`gemini executeTrade |> ${err}`)\n        }\n    }\n\n    newOrder = async (params = {}) => {\n        try {\n            return this.requestPrivate(`/order/new`, {\n                client_order_id: shortid(),\n                type: `exchange limit`,\n                ...params,\n            })\n        } catch(err){\n            return Promise.reject(`gemini newOrder |> ${err}`)\n        }\n        \n    }\n\n    cancelOrders = async (params = {}) => {\n        try {\n            return this.requestPrivate(`/order/cancel/all`)\n        } catch(err){\n            return Promise.reject(`gemini cancelOrders |> ${err}`)\n        }\n        \n    }\n\n    availableBalances = async () => {\n        try {\n            return this.requestPrivate(`/balances`)\n        } catch(err){\n            return Promise.reject(`gemini availableBalances |> ${err}`)\n        }\n    }\n\n    orderStatus = (orderId) => {\n        try {\n            return this.requestPrivate(`/order/status`, { order_id: orderId })\n        } catch(err){\n            return Promise.reject(`gemini orderStatus |> ${err}`)\n        }\n    }\n\n    orderHistory = async (orderId) => {\n        try {\n            let trades = await this.requestPrivate(`/mytrades`, { symbol: 'ETHUSD'} )\n            let orderTrades = trades.filter((trade) =>{\n                return trade.order_id == orderId\n            })\n\n            let fee = 0\n            let amount = 0\n            let price = 0\n            let numberOfTrades = 0\n\n            orderTrades.forEach((trade) => {\n                fee = parseFloat(trade.fee_amount) + fee\n                amount = parseFloat(trade.amount) + amount\n                price = parseFloat(trade.price) + price\n                numberOfTrades = numberOfTrades + 1\n            })\n\n            let averagePrice = price / numberOfTrades\n\n            let tradeSummary = {\n                fee,\n                amount,\n                price: averagePrice\n            }\n\n            return tradeSummary\n        } catch(err){\n            return Promise.reject(`gemini orderStatus |> ${err}`)\n        }\n    }\n}"]}