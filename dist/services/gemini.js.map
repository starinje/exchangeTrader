{"version":3,"sources":["../../src/services/gemini.js"],"names":["GeminiService","options","getOrderBook","requestOptions","uri","url","session","orderBook","timestamp","bids","map","bidLevel","price","amount","asks","askLevel","timeStamp","console","log","defaults","json","headers"],"mappings":";;;;;;AAAA;;;;;;;;;;IAEqBA,a,GAEjB,uBAAYC,OAAZ,EAAoB;AAAA;;AAAA;;AAAA,SAUpBC,YAVoB,6CAUL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEDC,sCAFC,GAEgB;AACnBC,iCAAK,MAAKH,OAAL,CAAaI;AADC,yBAFhB;AAAA;AAAA,+BAMe,MAAKC,OAAL,CAAaH,cAAb,CANf;;AAAA;AAMHI,iCANG;AAQHC,iCARG,GAQSD,UAAUE,IAAV,CAAe,CAAf,EAAkBD,SAR3B;AAUDC,4BAVC,GAUMF,UAAUE,IAAV,CAAeC,GAAf,CAAmB,UAACC,QAAD,EAAc;AAC1C,mCAAO;AACHC,uCAAOD,SAASC,KADb;AAEHC,wCAAQF,SAASE;AAFd,6BAAP;AAIH,yBALY,CAVN;AAiBDC,4BAjBC,GAiBMP,UAAUO,IAAV,CAAeJ,GAAf,CAAmB,UAACK,QAAD,EAAc;AAC1C,mCAAO;AACHH,uCAAOG,SAASH,KADb;AAEHC,wCAAQE,SAASF;AAFd,6BAAP;AAIH,yBALY,CAjBN;AAAA,yDAwBA;AACHC,kCAAMA,IADH;AAEHL,kCAAMA,IAFH;AAGHO,uCAAWR;AAHR,yBAxBA;;AAAA;AAAA;AAAA;;AA+BPS,gCAAQC,GAAR;;AA/BO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAVK;;AAChB,SAAKjB,OAAL,GAAeA,WAAW,EAA1B;AACA,SAAKK,OAAL,GAAe,yBAAGa,QAAH,CAAY;AACvBC,cAAM,IADiB;AAEvBC,iBAAS;AACL,0BAAc;AADT;AAFc,KAAZ,CAAf;AAMH,C;;kBAVgBrB,a","file":"gemini.js","sourcesContent":["import rp from 'request-promise'\n\nexport default class GeminiService {\n\n    constructor(options){\n        this.options = options || {}\n        this.session = rp.defaults({\n            json: true,\n            headers: {\n                'User-Agent': 'Request-Promise'\n            }\n        })\n    }\n\n    getOrderBook = async () => {\n        try{\n            const requestOptions = {\n                uri: this.options.url,\n            }\n\n            let orderBook = await this.session(requestOptions)\n\n            let timestamp = orderBook.bids[0].timestamp\n\n            const bids = orderBook.bids.map((bidLevel) => {\n                return {\n                    price: bidLevel.price,\n                    amount: bidLevel.amount\n                }\n            })\n\n            const asks = orderBook.asks.map((askLevel) => {\n                return {\n                    price: askLevel.price,\n                    amount: askLevel.amount\n                }\n            })\n\n            return {\n                asks: asks,\n                bids: bids,\n                timeStamp: timestamp\n            }\n\n        } catch(err){\n            console.log(err)\n        }\n\n    }\n\n}"]}