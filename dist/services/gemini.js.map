{"version":3,"sources":["../../src/services/gemini.js"],"names":["createRequestConfig","key","secret","payload","console","log","encodedPayload","Buffer","JSON","stringify","toString","signature","createHmac","update","digest","GeminiService","options","requestPrivate","endpoint","params","Error","requestUrl","baseUrl","nonce","Date","now","request","config","requestOptions","method","uri","headers","session","logger","info","requestPublic","url","body","Promise","reject","getOrderBook","orderBook","timestamp","bids","map","bidLevel","price","amount","asks","askLevel","executeTrade","tradeDetails","action","quantity","rate","orderParams","client_order_id","symbol","side","type","newOrder","orderResults","tradeCompleted","tradeCompletedDetails","tradeStatus","delay","orderStatus","order_id","currentTradeStatus","executed_amount","original_amount","availableBalances","orderId","subdomain","sandbox","defaults","json"],"mappings":"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","file":"gemini.js","sourcesContent":["import rp from 'request-promise'\nimport crypto from 'crypto';\nimport shortid from 'shortid';\n\n\nfunction createRequestConfig({ key, secret, payload }){\n\n    console.log(`key is: ${key}`)\n    console.log(`secret is: ${secret}`)\n  const encodedPayload = (new Buffer(JSON.stringify(payload)))\n    .toString(`base64`);\n\n  const signature = crypto\n    .createHmac(`sha384`, secret)\n    .update(encodedPayload)\n    .digest(`hex`);\n\n  return {\n      'X-GEMINI-APIKEY': key,\n      'X-GEMINI-PAYLOAD': encodedPayload,\n      'X-GEMINI-SIGNATURE': signature,\n  };\n}\n\n\nexport default class GeminiService {\n\n    constructor(options){\n        this.options = options || {}\n        this.logger = this.options.logger\n        const subdomain = this.options.sandbox ? `api.sandbox` : `api`;\n        this.baseUrl = `https://${subdomain}.gemini.com/v1`;\n        this.session = rp.defaults({\n            json: true,\n            headers: {\n                'User-Agent': 'Request-Promise'\n            }\n        })\n    }\n\n    requestPrivate = async(endpoint, params = {}) => {\n        try{\n            //code here to send private request\n            if (!this.options.key || !this.options.secret) {\n                throw new Error(\n                    `API key and secret key required to use authenticated methods`,\n                );\n            }\n\n            const requestUrl = `${this.baseUrl}${endpoint}`\n\n            const payload = {\n                nonce: Date.now(),\n                request: `/v1${endpoint}`,\n                ...params,\n            };\n\n            console.log(payload)\n\n            const config = createRequestConfig({\n                payload,\n                key: this.options.key,\n                secret: this.options.secret,\n            });\n\n            console.log(config)\n\n            const requestOptions = {\n                method: 'POST',\n                uri: requestUrl,\n                headers: config\n            }\n\n            console.log(JSON.stringify(requestOptions))\n\n            return await this.session(requestOptions)\n        } catch(err) {\n            this.logger.info(`error: ${err}`)\n            return \n        }\n    }\n\n    requestPublic = async (endpoint, params = {}) => {\n        try {\n            const requestOptions = {\n                method: 'GET',\n                uri: `${this.options.url}${endpoint}`,\n                body: {\n                    ...params\n                }\n            }\n\n            return await this.session(requestOptions) \n        } catch(err) {\n            return Promise.reject(err)\n        } \n    }\n\n    getOrderBook = async () => {\n        try{\n            // let orderBook = await this.session(requestOptions)\n            let orderBook = await this.requestPublic(`/book/ethusd`, {})\n\n            let timestamp = orderBook.bids[0].timestamp\n\n            const bids = orderBook.bids.map((bidLevel) => {\n                return {\n                    price: bidLevel.price,\n                    amount: bidLevel.amount\n                }\n            })\n\n            const asks = orderBook.asks.map((askLevel) => {\n                return {\n                    price: askLevel.price,\n                    amount: askLevel.amount\n                }\n            })\n\n            return { asks, bids,timestamp}\n        } catch(err){\n            console.log(err)\n        }\n\n    }\n\n    executeTrade = async (tradeDetails) => {\n        this.logger.info(`placing ${tradeDetails.action} trade on Gemini for ${tradeDetails.quantity} ethereum at $${tradeDetails.rate}/eth`)\n        \n        let orderParams = { \n            client_order_id: \"20150102-4738721\", \n            symbol: 'ethusd',       \n            amount: tradeDetails.quantity,        \n            price: tradeDetails.rate,\n            side: tradeDetails.action,\n            type: 'exchange limit'\n        }\n\n        //place order\n        let orderResults = await this.newOrder(orderParams)\n\n        let tradeCompleted = false\n        let tradeCompletedDetails\n\n        // logic to here that tries to place order\n        // if it doesnt go through then retrive order book and try matchin existing order as long as it is still profitable\n        // perhaps this logic should move to index.js?\n\n        //wait for order to go through and then return final trade details\n        while(tradeStatus == 'pending'){\n            await Promise.delay(1000)\n            let tradeStatus = await orderStatus(orderResults.order_id)\n            if(currentTradeStatus.executed_amount == currentTradeStatus.original_amount){\n                tradeCompleted = true\n                tradeCompletedDetails = tradeStatus\n            }\n        }\n\n\n\n\n        return tradeCompletedDetails\n    }\n\n    newOrder = async (params = {}) => {\n        return await this.requestPrivate(`/order/new`, {\n            client_order_id: shortid(),\n            type: `exchange limit`,\n            ...params,\n        })\n    }\n\n    availableBalances = async () => {\n        return this.requestPrivate(`/balances`)\n    }\n\n    orderStatus = (orderId) => {\n        return this.requestPrivate(`/order/status`, { order_id: orderId })\n    \n    }\n    \n\n\n\n}"]}