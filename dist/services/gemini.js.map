{"version":3,"sources":["../../src/services/gemini.js"],"names":["createRequestConfig","key","secret","payload","encodedPayload","Buffer","JSON","stringify","toString","signature","createHmac","update","digest","GeminiService","options","sandbox","requestPrivate","endpoint","params","Error","requestUrl","baseUrl","nonce","Date","now","request","config","console","log","requestOptions","method","uri","headers","session","logger","info","requestPublic","url","body","Promise","reject","getOrderBook","orderBook","timestamp","bids","map","bidLevel","price","amount","asks","askLevel","executeTrade","tradeDetails","action","quantity","rate","orderParams","client_order_id","symbol","side","type","orderResults","newOrder","resolve","subdomain","defaults","json"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;AAGA,SAASA,mBAAT,OAAsD;AAAA,QAAvBC,GAAuB,QAAvBA,GAAuB;AAAA,QAAlBC,MAAkB,QAAlBA,MAAkB;AAAA,QAAVC,OAAU,QAAVA,OAAU;;AACpD,QAAMC,iBAAkB,IAAIC,MAAJ,CAAWC,KAAKC,SAAL,CAAeJ,OAAf,CAAX,CAAD,CACpBK,QADoB,UAAvB;;AAGA,QAAMC,YAAY,iBACfC,UADe,WACMR,MADN,EAEfS,MAFe,CAERP,cAFQ,EAGfQ,MAHe,OAAlB;;AAKA,WAAO;AACH,2BAAmBX,GADhB;AAEH,4BAAoBG,cAFjB;AAGH,8BAAsBK;AAHnB,KAAP;AAKD;;IAGoBI,a,GAEjB,uBAAYC,OAAZ,EAAqBC,OAArB,EAA6B;AAAA;;AAAA;;AAAA,SAa7BC,cAb6B;AAAA,8DAaZ,iBAAMC,QAAN;AAAA,gBAAgBC,MAAhB,uEAAyB,EAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,kCAGL,CAAC,MAAKJ,OAAL,CAAab,GAAd,IAAqB,CAAC,MAAKa,OAAL,CAAaZ,MAH9B;AAAA;AAAA;AAAA;;AAAA,kCAIC,IAAIiB,KAAJ,gEAJD;;AAAA;AASHC,sCATG,QASa,MAAKC,OATlB,GAS4BJ,QAT5B;AAWHd,mCAXG;AAYLmB,uCAAOC,KAAKC,GAAL,EAZF;AAaLC,yCAASR;AAbJ,+BAcFC,MAdE;AAiBHQ,kCAjBG,GAiBM1B,oBAAoB;AAC/BG,gDAD+B;AAE/BF,qCAAK,MAAKa,OAAL,CAAab,GAFa;AAG/BC,wCAAQ,MAAKY,OAAL,CAAaZ;AAHU,6BAApB,CAjBN;;;AAuBTyB,oCAAQC,GAAR,CAAYF,MAAZ;;AAEMG,0CAzBG,GAyBc;AACnBC,wCAAQ,MADW;AAEnBC,qCAAKX,UAFc;AAGnBY,yCAASN;AAHU,6BAzBd;;;AA+BTC,oCAAQC,GAAR,CAAYtB,KAAKC,SAAL,CAAesB,cAAf,CAAZ;;AA/BS;AAAA,mCAiCI,MAAKI,OAAL,CAAaJ,cAAb,CAjCJ;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAmCT,kCAAKK,MAAL,CAAYC,IAAZ;AAnCS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAbY;;AAAA;AAAA;AAAA;AAAA;;AAAA,SAqD7BC,aArD6B;AAAA,8DAqDb,kBAAOnB,QAAP;AAAA,gBAAiBC,MAAjB,uEAA0B,EAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEFW,0CAFE,GAEe;AACnBC,wCAAQ,KADW;AAEnBC,0CAAQ,MAAKjB,OAAL,CAAauB,GAArB,GAA2BpB,QAFR;AAGnBqB,mDACOpB,MADP;AAHmB,6BAFf;AAAA;AAAA,mCAUK,MAAKe,OAAL,CAAaJ,cAAb,CAVL;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,8DAYDU,QAAQC,MAAR,cAZC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SArDa;;AAAA;AAAA;AAAA;AAAA;;AAAA,SAqE7BC,YArE6B,6CAqEd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAGe,MAAKL,aAAL,iBAAmC,EAAnC,CAHf;;AAAA;AAGHM,iCAHG;AAKHC,iCALG,GAKSD,UAAUE,IAAV,CAAe,CAAf,EAAkBD,SAL3B;AAODC,4BAPC,GAOMF,UAAUE,IAAV,CAAeC,GAAf,CAAmB,UAACC,QAAD,EAAc;AAC1C,mCAAO;AACHC,uCAAOD,SAASC,KADb;AAEHC,wCAAQF,SAASE;AAFd,6BAAP;AAIH,yBALY,CAPN;AAcDC,4BAdC,GAcMP,UAAUO,IAAV,CAAeJ,GAAf,CAAmB,UAACK,QAAD,EAAc;AAC1C,mCAAO;AACHH,uCAAOG,SAASH,KADb;AAEHC,wCAAQE,SAASF;AAFd,6BAAP;AAIH,yBALY,CAdN;AAAA,0DAqBA,EAAEC,UAAF,EAAQL,UAAR,EAAaD,oBAAb,EArBA;;AAAA;AAAA;AAAA;;AAuBPhB,gCAAQC,GAAR;;AAvBO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KArEc;;AAAA,SAiG7BuB,YAjG6B;AAAA,8DAiGd,kBAAOC,YAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,kCAAKlB,MAAL,CAAYC,IAAZ,cAA4BiB,aAAaC,MAAzC,6BAAuED,aAAaE,QAApF,sBAA6GF,aAAaG,IAA1H;;AAEIC,uCAHO,GAGO;AACdC,iDAAiB,kBADH,EACuB;AACrCC,wCAAQ,QAFM,EAEU;AACxBJ,0CAAUF,aAAaE,QAHT,EAG0B;AACxCP,uCAAOK,aAAaG,IAJN;AAKdI,sCAAMP,aAAaC,MALL;AAMdO,sCAAM;AANQ,6BAHP;AAYPC,wCAZO,GAYQ,MAAKC,QAAL,CAAcN,WAAd,CAZR;;AAcX;;AAEA;;AAhBW,8DAkBJjB,QAAQwB,OAAR,CAAgB,0BAAhB,CAlBI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAjGc;;AAAA;AAAA;AAAA;AAAA;;AAAA,SAsH7BD,QAtH6B;AAAA,8DAsHlB;AAAA,gBAAO5C,MAAP,uEAAgB,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACM,MAAKF,cAAL;AACTyC,iDAAiB,wBADR;AAETG;AAFS,+BAGN1C,MAHM,EADN;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAtHkB;;AAAA;AAAA;AAAA;AAAA;;AACzB,SAAKJ,OAAL,GAAeA,WAAW,EAA1B;AACA,SAAKoB,MAAL,GAAcpB,QAAQoB,MAAtB;AACA,QAAM8B,YAAYjD,+BAAlB;AACA,SAAKM,OAAL,gBAA0B2C,SAA1B;AACA,SAAK/B,OAAL,GAAe,yBAAGgC,QAAH,CAAY;AACvBC,cAAM,IADiB;AAEvBlC,iBAAS;AACL,0BAAc;AADT;AAFc,KAAZ,CAAf;AAMH,C;;kBAbgBnB,a","file":"gemini.js","sourcesContent":["import rp from 'request-promise'\nimport crypto from 'crypto';\nimport shortid from 'shortid';\n\n\nfunction createRequestConfig({ key, secret, payload }){\n  const encodedPayload = (new Buffer(JSON.stringify(payload)))\n    .toString(`base64`);\n\n  const signature = crypto\n    .createHmac(`sha384`, secret)\n    .update(encodedPayload)\n    .digest(`hex`);\n\n  return {\n      'X-GEMINI-APIKEY': key,\n      'X-GEMINI-PAYLOAD': encodedPayload,\n      'X-GEMINI-SIGNATURE': signature,\n  };\n}\n\n\nexport default class GeminiService {\n\n    constructor(options, sandbox){\n        this.options = options || {}\n        this.logger = options.logger\n        const subdomain = sandbox ? `api.sandbox` : `api`;\n        this.baseUrl = `https://${subdomain}.gemini.com/v1`;\n        this.session = rp.defaults({\n            json: true,\n            headers: {\n                'User-Agent': 'Request-Promise'\n            }\n        })\n    }\n\n    requestPrivate = async(endpoint, params = {}) => {\n        try{\n            //code here to send private request\n            if (!this.options.key || !this.options.secret) {\n                throw new Error(\n                    `API key and secret key required to use authenticated methods`,\n                );\n            }\n\n            const requestUrl = `${this.baseUrl}${endpoint}`\n\n            const payload = {\n                nonce: Date.now(),\n                request: endpoint,\n                ...params,\n            };\n\n            const config = createRequestConfig({\n                payload,\n                key: this.options.key,\n                secret: this.options.secret,\n            });\n\n            console.log(config)\n\n            const requestOptions = {\n                method: 'POST',\n                uri: requestUrl,\n                headers: config\n            }\n\n            console.log(JSON.stringify(requestOptions))\n\n            return await this.session(requestOptions)\n        } catch(err) {\n            this.logger.info(`error: ${err}`)\n            return \n        }\n    }\n\n    requestPublic = async (endpoint, params = {}) => {\n        try {\n            const requestOptions = {\n                method: 'GET',\n                uri: `${this.options.url}${endpoint}`,\n                body: {\n                    ...params\n                }\n            }\n\n            return await this.session(requestOptions) \n        } catch(err) {\n            return Promise.reject(err)\n        } \n    }\n\n    getOrderBook = async () => {\n        try{\n            // let orderBook = await this.session(requestOptions)\n            let orderBook = await this.requestPublic(`/book/ethusd`, {})\n\n            let timestamp = orderBook.bids[0].timestamp\n\n            const bids = orderBook.bids.map((bidLevel) => {\n                return {\n                    price: bidLevel.price,\n                    amount: bidLevel.amount\n                }\n            })\n\n            const asks = orderBook.asks.map((askLevel) => {\n                return {\n                    price: askLevel.price,\n                    amount: askLevel.amount\n                }\n            })\n\n            return { asks, bids,timestamp}\n        } catch(err){\n            console.log(err)\n        }\n\n    }\n\n    executeTrade = async (tradeDetails) => {\n        this.logger.info(`placing ${tradeDetails.action} trade on Gemini for ${tradeDetails.quantity} ethereum at $${tradeDetails.rate}/eth`)\n\n        let orderParams = { \n            client_order_id: \"20150102-4738721\", // A client-specified order token\n            symbol: 'ethusd',       // Or any symbol from the /symbols api\n            quantity: tradeDetails.quantity,        // Once again, a quoted number\n            price: tradeDetails.rate,\n            side: tradeDetails.action,\n            type: 'exchange limit'\n        }\n\n        let orderResults = this.newOrder(orderParams)\n\n        //check to make sure order is place\n\n        //return when order is successful\n\n        return Promise.resolve('trade completed for GDAX')\n    }\n\n    newOrder = async (params = {}) => {\n        return await this.requestPrivate(`/order/new`, {\n            client_order_id: shortid(),\n            type: `exchange limit`,\n            ...params,\n        })\n    }\n\n\n\n}"]}