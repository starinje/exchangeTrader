{"version":3,"sources":["../../src/services/gdax.js"],"names":["GdaxService","options","getOrderBook","resolve","reject","publicClient","getProductOrderBook","err","response","data","orderBook","bids","map","bidLevel","price","amount","asks","askLevel","reformattedOrderBook","timeStamp","executeTrade","tradeDetails","logger","info","action","quantity","rate","orderParams","productId","size","newOrder","orderResults","tradeCompleted","tradeCompletedDetails","delay","orderStatus","order_id","tradeStatus","length","params","reformattedParams","product_id","authedClient","results","availableBalances","orderId","console","log","getOrders","baseUrl","sandbox","PublicClient","AuthenticatedClient","key","secret","passphrase"],"mappings":"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","file":"gdax.js","sourcesContent":["import rp from 'request-promise'\nimport crypto from 'crypto';\nimport shortid from 'shortid';\nimport Promise from 'bluebird'\nimport Gdax from 'gdax'\n\nexport default class GdaxService {\n\n    constructor(options){\n        this.options = options || {}\n        this.logger = this.options.logger\n        this.baseUrl = this.options.sandbox ? `https://api-public.sandbox.gdax.com` : `https://api.gdax.com`\n        this.publicClient = new Gdax.PublicClient('ETH-USD', this.baseUrl);\n        this.authedClient = new Gdax.AuthenticatedClient(\n            this.options.key, this.options.secret, this.options.passphrase, this.baseUrl);\n        }\n\n    getOrderBook = async () => {\n        return new Promise((resolve, reject) => {\n            this.publicClient.getProductOrderBook({'level': 2}, (err, response, data) => {\n\n                let orderBook = {...data}\n            \n                const bids = orderBook.bids.map((bidLevel) => {\n                    return {\n                        price: bidLevel[0],\n                        amount: bidLevel[1]\n                    }\n                })\n\n                const asks = orderBook.asks.map((askLevel) => {\n                    return {\n                        price: askLevel[0],\n                        amount: askLevel[1]\n                    }\n                })\n\n                let reformattedOrderBook = {\n                    asks: asks,\n                    bids: bids,\n                    timeStamp: 'timestamp'\n                }\n\n                return resolve(reformattedOrderBook)\n            })\n        })\n    }\n\n    executeTrade = async (tradeDetails) => {\n        this.logger.info(`placing ${tradeDetails.action} trade on Gemini for ${tradeDetails.quantity} ethereum at $${tradeDetails.rate}/eth`)\n        \n        let orderParams = { \n            productId: 'ETH-USD',       \n            size: tradeDetails.quantity,        \n            price: tradeDetails.rate,\n            action: tradeDetails.action\n        }\n\n        let orderResults = await this.newOrder(orderParams)\n\n        let tradeCompleted = false\n        let tradeCompletedDetails\n\n        while(!tradeCompleted){\n            await Promise.delay(1000)\n            let tradeStatus = await this.orderStatus(orderResults.order_id)\n            if(tradeStatus.length < 1){\n                tradeCompleted = true\n                tradeCompletedDetails = tradeStatus\n            }\n        }\n\n        return tradeCompletedDetails\n    }\n\n    newOrder = async (params = {}) => {\n        return new Promise((resolve, reject) => {\n\n            const reformattedParams = {\n                price: params.price,\n                size: params.size,\n                product_id: params.productId\n            }\n\n            this.authedClient[params.action](reformattedParams, (err, results, data) => {\n                return resolve(results)\n            })\n        })\n\n    }\n\n    availableBalances = async () => {\n        // return this.requestPrivate(`/balances`)\n    }\n\n    orderStatus = (orderId) => {\n        console.log('in orderStatus function')\n        return new Promise((resolve, reject) => {\n            this.authedClient.getOrders((err, results, data) => {\n                return resolve(data)\n            })\n        })\n    }\n}"]}