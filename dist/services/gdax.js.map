{"version":3,"sources":["../../src/services/gdax.js"],"names":["GdaxService","options","getOrderBook","resolve","reject","publicClient","getProductOrderBook","err","response","data","orderBook","bids","map","bidLevel","price","amount","asks","askLevel","reformattedOrderBook","timeStamp","executeTrade","tradeDetails","logger","info","action","quantity","rate","orderParams","productId","size","newOrder","orderResults","tradeCompleted","tradeCompletedDetails","orderStatus","id","tradeStatus","status","delay","params","reformattedParams","product_id","authedClient","results","availableBalances","orderId","getOrder","baseUrl","sandbox","PublicClient","AuthenticatedClient","key","secret","passphrase"],"mappings":"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","file":"gdax.js","sourcesContent":["import rp from 'request-promise'\nimport crypto from 'crypto';\nimport shortid from 'shortid';\nimport Promise from 'bluebird'\nimport Gdax from 'gdax'\n\nexport default class GdaxService {\n    constructor(options){\n        this.options = options || {}\n        this.logger = this.options.logger\n        this.baseUrl = this.options.sandbox ? `https://api-public.sandbox.gdax.com` : `https://api.gdax.com`\n        this.publicClient = new Gdax.PublicClient('ETH-USD', this.baseUrl);\n        this.authedClient = new Gdax.AuthenticatedClient(\n            this.options.key, this.options.secret, this.options.passphrase, this.baseUrl);\n        }\n\n    getOrderBook = async () => {\n        try{\n            return new Promise((resolve, reject) => {\n                this.publicClient.getProductOrderBook({'level': 2}, (err, response, data) => {\n\n                    let orderBook = {...data}\n                \n                    const bids = orderBook.bids.map((bidLevel) => {\n                        return {\n                            price: bidLevel[0],\n                            amount: bidLevel[1]\n                        }\n                    })\n\n                    const asks = orderBook.asks.map((askLevel) => {\n                        return {\n                            price: askLevel[0],\n                            amount: askLevel[1]\n                        }\n                    })\n\n                    let reformattedOrderBook = {\n                        asks: asks,\n                        bids: bids,\n                        timeStamp: 'timestamp'\n                    }\n\n                    return resolve(reformattedOrderBook)\n                })\n            })\n        } catch(err){\n            return Promise.reject(`gdax getOrderBook |> ${err}`)\n        }\n      \n    }\n\n    executeTrade = async (tradeDetails) => {\n        try{\n            this.logger.info(`placing ${tradeDetails.action} trade on Gdax for ${tradeDetails.quantity} ethereum at $${tradeDetails.rate}/eth`)\n        \n            let orderParams = { \n                productId: 'ETH-USD',       \n                size: tradeDetails.quantity,        \n                price: tradeDetails.rate,\n                action: tradeDetails.action\n            }\n\n            let orderResults = await this.newOrder(orderParams)\n\n            let tradeCompleted = false\n            let tradeCompletedDetails\n\n            while(!tradeCompleted){\n                let tradeStatus = await this.orderStatus(orderResults.id)\n                if(tradeStatus.status == 'done'){\n                    tradeCompleted = true\n                    tradeCompletedDetails = tradeStatus\n                }\n                await Promise.delay(1000)\n            }\n\n            return tradeCompletedDetails\n\n        } catch(err){\n            return Promise.reject(`gdax executeTrade |> ${err}`)\n        } \n       \n    }\n\n    newOrder = async (params = {}) => {\n        try {\n            return new Promise((resolve, reject) => {\n\n                const reformattedParams = {\n                    price: params.price,\n                    size: params.size,\n                    product_id: params.productId\n                }\n\n                this.authedClient[params.action](reformattedParams, (err, results, data) => {\n                    return resolve(results)\n                })\n            })\n        } catch(err){\n            return Promise.reject(`gdax newOrder Error: ${err}`)\n            \n        }\n    }\n\n    availableBalances = async () => {\n        try {\n        } catch(err){\n            return Promise.reject(`gdax availableBalances |> ${err}`)\n        }\n    }\n\n    orderStatus = (orderId) => {\n        try {  \n           return new Promise((resolve, reject) => {\n               this.authedClient.getOrder(orderId, (err, results, data) => {\n                   return resolve(data)\n               });\n            })\n        } catch(err){\n            return Promise.reject(`gdax orderStatus |> ${err}`)\n        }\n    }\n}"]}