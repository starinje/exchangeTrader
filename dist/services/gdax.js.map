{"version":3,"sources":["../../src/services/gdax.js"],"names":["GdaxService","options","getOrderBook","requestOptions","uri","url","session","orderBook","bids","map","bidLevel","price","amount","asks","askLevel","timeStamp","console","log","executeTrade","tradeDetails","logger","info","action","quantity","rate","Promise","resolve","defaults","json","headers"],"mappings":";;;;;;AAAA;;;;;;;;;;IAEqBA,W,GAEjB,qBAAYC,OAAZ,EAAoB;AAAA;;AAAA;;AAAA,SAWpBC,YAXoB,6CAWL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEP;AACMC,sCAHC,GAGgB;AACnBC,iCAAK,MAAKH,OAAL,CAAaI;AADC,yBAHhB;AAAA;AAAA,+BAOe,MAAKC,OAAL,CAAaH,cAAb,CAPf;;AAAA;AAOHI,iCAPG;AASDC,4BATC,GASMD,UAAUC,IAAV,CAAeC,GAAf,CAAmB,UAACC,QAAD,EAAc;AAC1C,mCAAO;AACHC,uCAAOD,SAAS,CAAT,CADJ;AAEHE,wCAAQF,SAAS,CAAT;AAFL,6BAAP;AAIH,yBALY,CATN;AAgBDG,4BAhBC,GAgBMN,UAAUM,IAAV,CAAeJ,GAAf,CAAmB,UAACK,QAAD,EAAc;AAC1C,mCAAO;AACHH,uCAAOG,SAAS,CAAT,CADJ;AAEHF,wCAAQE,SAAS,CAAT;AAFL,6BAAP;AAIH,yBALY,CAhBN;;AAuBP;;AAvBO,yDAwBA;AACHD,kCAAMA,IADH;AAEHL,kCAAMA,IAFH;AAGHO,uCAAW;AAHR,yBAxBA;;AAAA;AAAA;AAAA;;AAgCPC,gCAAQC,GAAR;;AAhCO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAXK;;AAAA,SA+CpBC,YA/CoB;AAAA,8DA+CL,kBAAOC,YAAP;AAAA;AAAA;AAAA;AAAA;;AAEV;AACD;AACA;AACA;;AAEA;AACA,kCAAKC,MAAL,CAAYC,IAAZ,cAA4BF,aAAaG,MAAzC,2BAAqEH,aAAaI,QAAlF,sBAA2GJ,aAAaK,IAAxH;AARW,8DASJC,QAAQC,OAAR,CAAgB,0BAAhB,CATI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SA/CK;;AAAA;AAAA;AAAA;AAAA;;AAChB,SAAKzB,OAAL,GAAeA,WAAW,EAA1B;AACA,SAAKmB,MAAL,GAAcnB,QAAQmB,MAAtB;AACA,SAAKd,OAAL,GAAe,yBAAGqB,QAAH,CAAY;AACvBC,cAAM,IADiB;AAEvBC,iBAAS;AACL,0BAAc;AADT;AAFc,KAAZ,CAAf;AAMH,C;;kBAXgB7B,W","file":"gdax.js","sourcesContent":["import rp from 'request-promise'\n\nexport default class GdaxService {\n\n    constructor(options){\n        this.options = options || {}\n        this.logger = options.logger\n        this.session = rp.defaults({\n            json: true,\n            headers: {\n                'User-Agent': 'Request-Promise'\n            }\n        })\n    }\n\n    getOrderBook = async () => {\n        try{\n            // TODO: update this to match format of gemini service\n            const requestOptions = {\n                uri: this.options.url,\n            }\n\n            let orderBook = await this.session(requestOptions)\n    \n            const bids = orderBook.bids.map((bidLevel) => {\n                return {\n                    price: bidLevel[0],\n                    amount: bidLevel[1]\n                }\n            })\n\n            const asks = orderBook.asks.map((askLevel) => {\n                return {\n                    price: askLevel[0],\n                    amount: askLevel[1]\n                }\n            })\n\n            // reformat order book into standard format\n            return {\n                asks: asks,\n                bids: bids,\n                timeStamp: 'timestamp'\n            }\n            \n\n        } catch(err){\n            console.log(err)\n        }\n    }\n\n    executeTrade = async (tradeDetails) => {\n\n         // this code should attempt to place limit order that wont incur transaction fees\n        // perhaps place buy orders at prices very close to the ask price but not in a current slot so that no taker fee is taken\n        // likewise place sell orders very close to the bid price but not in a current slot so that no taker fee is taken\n        // even if it is only successful some of the time it will help\n\n        // place market trade on gdax \n        this.logger.info(`placing ${tradeDetails.action} trade on Gdax for ${tradeDetails.quantity} ethereum at $${tradeDetails.rate}/eth`)\n        return Promise.resolve('trade completed for GDAX')\n        \n    }\n\n}"]}