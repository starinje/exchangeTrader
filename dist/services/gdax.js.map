{"version":3,"sources":["../../src/services/gdax.js"],"names":["GdaxService","options","getOrderBook","resolve","reject","publicClient","getProductOrderBook","err","response","data","orderBook","bids","map","bidLevel","price","amount","asks","askLevel","reformattedOrderBook","timeStamp","executeTrade","tradeDetails","logger","info","action","quantity","rate","orderParams","productId","size","newOrder","orderResults","JSON","parse","body","tradeCompleted","tradeCompletedDetails","orderStatus","id","tradeStatus","status","delay","tradeSummary","fee","parseFloat","fill_fees","params","reformattedParams","product_id","authedClient","results","availableBalances","getAccounts","orderId","getOrder","baseUrl","sandbox","PublicClient","AuthenticatedClient","key","secret","passphrase"],"mappings":"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","file":"gdax.js","sourcesContent":["import rp from 'request-promise'\nimport crypto from 'crypto';\nimport shortid from 'shortid';\nimport Promise from 'bluebird'\nimport Gdax from 'gdax'\n\nexport default class GdaxService {\n    constructor(options){\n        this.options = options || {}\n        this.logger = this.options.logger\n        this.baseUrl = this.options.sandbox ? `https://api-public.sandbox.gdax.com` : `https://api.gdax.com`\n        this.publicClient = new Gdax.PublicClient('ETH-USD', this.baseUrl);\n        this.authedClient = new Gdax.AuthenticatedClient(\n            this.options.key, this.options.secret, this.options.passphrase, this.baseUrl);\n        }\n\n    getOrderBook = async () => {\n        try{\n            return new Promise((resolve, reject) => {\n                this.publicClient.getProductOrderBook({'level': 2}, (err, response, data) => {\n\n                    let orderBook = {...data}\n                \n                    const bids = orderBook.bids.map((bidLevel) => {\n                        return {\n                            price: bidLevel[0],\n                            amount: bidLevel[1]\n                        }\n                    })\n\n                    const asks = orderBook.asks.map((askLevel) => {\n                        return {\n                            price: askLevel[0],\n                            amount: askLevel[1]\n                        }\n                    })\n\n                    let reformattedOrderBook = {\n                        asks: asks,\n                        bids: bids,\n                        timeStamp: 'timestamp'\n                    }\n\n                    return resolve(reformattedOrderBook)\n                })\n            })\n        } catch(err){\n            return Promise.reject(`gdax getOrderBook |> ${err}`)\n        }\n      \n    }\n\n    executeTrade = async (tradeDetails) => {\n        try{\n            this.logger.info(`placing ${tradeDetails.action} trade on Gdax for ${tradeDetails.quantity} ethereum at $${tradeDetails.rate}/eth`)\n        \n            let orderParams = { \n                productId: 'ETH-USD',       \n                size: tradeDetails.quantity,        \n                price: tradeDetails.rate,\n                action: tradeDetails.action\n            }\n\n            let orderResults = await this.newOrder(orderParams)\n            orderResults = JSON.parse(orderResults.body)\n\n            let tradeCompleted = false\n            let tradeCompletedDetails\n\n            while(!tradeCompleted){\n                let tradeStatus = await this.orderStatus(orderResults.id)\n                if(tradeStatus.status == 'done'){\n                    tradeCompleted = true\n                    tradeCompletedDetails = tradeStatus\n                }\n                await Promise.delay(1000)\n            }\n\n            let tradeSummary = {\n                fee: parseFloat(tradeCompletedDetails.fill_fees),\n                amount: parseFloat(tradeCompletedDetails.size),\n                price: parseFloat(tradeCompletedDetails.price),\n                action: tradeDetails.action\n            }\n\n            return tradeSummary\n\n        } catch(err){\n            return Promise.reject(`gdax executeTrade |> ${err}`)\n        } \n       \n    }\n\n    newOrder = async (params = {}) => {\n        try {\n            return new Promise((resolve, reject) => {\n\n                const reformattedParams = {\n                    price: params.price,\n                    size: params.size,\n                    product_id: params.productId\n                }\n\n                this.authedClient[params.action](reformattedParams, (err, results, data) => {\n                    return resolve(results)\n                })\n            })\n        } catch(err){\n            return Promise.reject(`gdax newOrder Error: ${err}`)\n            \n        }\n    }\n\n    \n    availableBalances = async () => {\n        try {\n            return new Promise((resolve, reject) => {\n                this.authedClient.getAccounts((err, results, data) => {\n                    return resolve(data)\n                })\n            })\n           \n        } catch(err){\n            return Promise.reject(`gdax accounts |> ${err}`)\n        }\n    }\n\n    orderStatus = (orderId) => {\n        try {  \n           return new Promise((resolve, reject) => {\n               this.authedClient.getOrder(orderId, (err, results, data) => {\n                   return resolve(data)\n               });\n            })\n        } catch(err){\n            return Promise.reject(`gdax orderStatus |> ${err}`)\n        }\n    }\n}"]}