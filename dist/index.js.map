{"version":3,"sources":["../src/index.js"],"names":["console","log","logger","info","geminiService","getOrderBook","orderBookGemini","gdaxService","orderBookGdax","orderBooks","gdax","gemini","determinePositionChange","positionChange","delay","timeDelta","main","ethereumTradingQuantity","takeProfitTradeThreshold","swapFundsTradeThreshold","bidPriceGemini","calculateBidPrice","bids","bidPriceGdax","askPriceGemini","calculateAskPrice","asks","askPriceGdax","transactionPercentageGemini","transactionPercentageGdax","gdaxBasePercentageDifference","geminiBasePercentageDifference","gdaxRateIsHigherAndProfitable","geminiRateIsSwappable","estimatedTransactionFees","estimatedGrossProfit","estimatedNetProfit","talSaleValue","totalPurchaseCost","totalSaleValue","type","action","quantity","units","rate","determineEthereumBalance","exchangeWithEthereumBalance","all","executeTrade","tradeResults","tradeLog","execute","TIMESTAMP_FORMAT","Logger","add","transports","Console","timestamp","utc","format","colorize","prettyPrint","level","process","env","NODE_ENV","aggregateProfit","priceLevel","find","bid","parseFloat","amount","price","ask"],"mappings":"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","file":"index.js","sourcesContent":["import fs from 'fs'\nimport autobahn from 'autobahn'\nimport program from 'commander'\nimport moment from 'moment'\nimport winston from 'winston'\nimport Promise from 'bluebird'\nimport request from 'request'\nimport rp from 'request-promise'\n\nimport config from './config'\n\nimport GdaxService from './services/gdax'\nimport GeminiService from './services/gemini'\n\nconst TIMESTAMP_FORMAT = 'HH:mm:ss.SSS'\n\n// Initialize logger\nconst logger = new winston.Logger().add(winston.transports.Console, {\n    timestamp: () => `[${moment.utc().format(TIMESTAMP_FORMAT)}]`,\n    colorize: true,\n    prettyPrint: true,\n    level: process.env.NODE_ENV === 'production' ? 'info' : 'debug',\n})\n\nconst gdaxService = new GdaxService({...config.gdax, logger})\nconst geminiService = new GeminiService({...config.gemini, logger})\n\nlet aggregateProfit = 0\n\nmain()\n\nasync function main(){\n\n  try {\n    console.log('')\n    console.log('')\n    logger.info('running arbitrage strategy...')\n\n    let orderBookGemini = await geminiService.getOrderBook()\n    let orderBookGdax = await gdaxService.getOrderBook()\n\n    let orderBooks = {\n      gdax: orderBookGdax,\n      gemini: orderBookGemini\n    }\n\n    let positionChange = await determinePositionChange(orderBooks)\n\n    if(positionChange == 'none'){\n      return \n    }\n    \n    // let results = await execute(positionChange)\n\n    \n  } catch(err){\n    logger.info(`error: ${err}`)\n  } finally{\n    await Promise.delay(config.timeDelta)\n    main()\n  }\n\n}\n\nasync function determinePositionChange(orderBooks){\n\n  const ethereumTradingQuantity = config.ethereumTradingQuantity\n  const takeProfitTradeThreshold = config.takeProfitTradeThreshold\n  const swapFundsTradeThreshold = config.swapFundsTradeThreshold\n\n  let bidPriceGemini = calculateBidPrice(orderBooks.gemini.bids, ethereumTradingQuantity)\n  let bidPriceGdax = calculateBidPrice(orderBooks.gdax.bids, ethereumTradingQuantity)\n  let askPriceGemini = calculateAskPrice(orderBooks.gemini.asks, ethereumTradingQuantity)\n  let askPriceGdax = calculateAskPrice(orderBooks.gdax.asks, ethereumTradingQuantity)\n\n  logger.info(`bidPriceGemini: ${bidPriceGemini}`)\n  logger.info(`bidPriceGdax: ${bidPriceGdax}`)\n  logger.info(`askPriceGemini: ${askPriceGemini}`)\n  logger.info(`askPriceGdax: ${askPriceGdax}`)\n\n  const transactionPercentageGemini = config.transactionPercentageGemini\n  const transactionPercentageGdax = config.transactionPercentageGdax\n\n  const gdaxBasePercentageDifference = ((bidPriceGdax - askPriceGemini)/askPriceGemini)*100\n  const geminiBasePercentageDifference = ((bidPriceGemini - askPriceGdax)/askPriceGdax)*100\n\n  const gdaxRateIsHigherAndProfitable = gdaxBasePercentageDifference > takeProfitTradeThreshold\n  const geminiRateIsSwappable = geminiBasePercentageDifference > swapFundsTradeThreshold\n\n  let positionChange\n  let estimatedTransactionFees\n  let estimatedGrossProfit\n  let estimatedNetProfit\n\n  logger.info(`gdaxBasePercentageDifference: ${gdaxBasePercentageDifference}`)\n  logger.info(`geminiBasePercentageDifference: ${geminiBasePercentageDifference}`)\n\n  if(gdaxRateIsHigherAndProfitable){\n    logger.info('gdax rate is higher and profitable')\n\n    let talSaleValue = bidPriceGdax*ethereumTradingQuantity\n    let totalPurchaseCost = askPriceGemini*ethereumTradingQuantity\n    estimatedGrossProfit = totalSaleValue-totalPurchaseCost\n    estimatedTransactionFees = ((transactionPercentageGdax/100)*totalSaleValue) + ((transactionPercentageGemini/100)*totalPurchaseCost)\n    estimatedNetProfit = estimatedGrossProfit - estimatedTransactionFees\n    \n    logger.info(`estimated total sale value: ${totalSaleValue}`)\n    logger.info(`estimated total purchase cost: ${totalPurchaseCost}`)\n    logger.info(`estimated gross profit: ${estimatedGrossProfit}`)\n    logger.info(`estimated transaction fees: ${estimatedTransactionFees}`)\n    logger.info(`estimated net profit: ${estimatedNetProfit}`)\n\n    positionChange = {\n      type: 'takeProfit',\n      gdax : {\n        action: 'sell',\n        quantity: ethereumTradingQuantity,\n        units: 'eth',\n        rate: bidPriceGdax\n      },\n      gemini: {\n        action: 'buy',\n        quantity: ethereumTradingQuantity,\n        units: 'eth',\n        rate: askPriceGemini\n      }\n    }\n  } else if (geminiRateIsSwappable) {\n    logger.info('Gemini Rate Is Swappable')\n\n    let totalSaleValue = bidPriceGemini*ethereumTradingQuantity\n    let totalPurchaseCost = askPriceGdax*ethereumTradingQuantity\n    estimatedGrossProfit = totalSaleValue-totalPurchaseCost\n    estimatedTransactionFees = ((transactionPercentageGemini/100)*totalSaleValue) + ((transactionPercentageGdax/100)*totalPurchaseCost)\n    estimatedNetProfit = estimatedGrossProfit - estimatedTransactionFees\n    \n    logger.info(`estimated total sale value: ${totalSaleValue}`)\n    logger.info(`estimated total purchase cost: ${totalPurchaseCost}`)\n    logger.info(`estimated gross profit: ${estimatedGrossProfit}`)\n    logger.info(`estimated transaction fees: ${estimatedTransactionFees}`)\n    logger.info(`estimated net profit: ${estimatedNetProfit}`)\n\n    positionChange= {\n      type: 'swapFunds',\n      gemini: {\n        action: 'sell',\n        quantity: ethereumTradingQuantity,\n        units: 'eth',\n        rate: bidPriceGemini\n      },\n      gdax : {\n        action: 'buy',\n        quantity: ethereumTradingQuantity,\n        units: 'eth',\n        rate: askPriceGdax\n      }\n    }\n  } else {\n    positionChange = 'none'\n    return positionChange\n  }\n\n  let exchangeWithEthereumBalance = await determineEthereumBalance()\n  \n  if(positionChange[exchangeWithEthereumBalance].action == 'sell'){\n    return positionChange\n  } else {\n    return 'none'\n  }\n}\n\nasync function execute(positionChange){\n\n  let tradeResults = await Promise.all([geminiService.executeTrade(positionChange.gemini), gdaxService.executeTrade(positionChange.gdax)])\n\n  let tradeLog = {\n    ...tradeResults,\n    type: positionChange.type\n  }\n  \n  return tradeLog\n}\n\nasync function determineEthereumBalance(){\n\n  // check balances on both exchanges\n  // return name of exchange with ethereum balance (account to sell from)\n  return 'gemini'\n\n}\n\nfunction calculateBidPrice(bids, ethereumTradingQuantity){\n\n  let priceLevel = bids.find((bid) => {\n    return parseFloat(bid.amount) >= ethereumTradingQuantity\n  })\n\n  return priceLevel ? parseFloat(priceLevel.price) : 'no match found'\n}\n\nfunction calculateAskPrice(asks, ethereumTradingQuantity){\n\n  let priceLevel = asks.find((ask) => {\n    return parseFloat(ask.amount) >= ethereumTradingQuantity\n  })\n\n  return priceLevel ? parseFloat(priceLevel.price) : 'no match found'\n}\n\n"]}