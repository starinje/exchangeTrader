{"version":3,"sources":["../src/index.js"],"names":["logger","info","timeDelta","tradeThreshold","geminiService","getOrderBook","orderBookGemini","gdaxService","orderBookGdax","orderBooks","gdax","gemini","actions","determineAction","console","log","delay","main","action","actionCompleted","execute","TIMESTAMP_FORMAT","aggregateProfit","Logger","add","transports","Console","timestamp","utc","format","colorize","prettyPrint","level","process","env","NODE_ENV","ethereumTradingQuantity","takeProfitTradeThreshold","swapFundsTradeThreshold","bidPriceGemini","calculateBidPrice","bids","bidPriceGdax","askPriceGemini","calculateAskPrice","asks","askPriceGdax","transactionPercentageGemini","transactionPercentageGdax","gdaxBasePercentageDifference","geminiBasePercentageDifference","gdaxRateIsHigherAndProfitable","geminiRateIsHigherAndProfitable","estimatedTransactionFees","estimatedGrossProfit","estimatedNetProfit","totalSaleValue","totalPurchaseCost","quantity","units","rate","exchangeWithEthereumBalance","determineEthereumBalance","priceLevel","find","bid","parseFloat","amount","price","ask"],"mappings":";;;uDAoCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGIA,mBAAOC,IAAP,CAAY,+BAAZ;;AAEAD,mBAAOC,IAAP,mBAA4B,iBAAOC,SAAnC;AACAF,mBAAOC,IAAP,wBAAiC,iBAAOE,cAAxC;;AANJ;AAAA,mBASgCC,cAAcC,YAAd,EAThC;;AAAA;AASQC,2BATR;AAAA;AAAA,mBAU8BC,YAAYF,YAAZ,EAV9B;;AAAA;AAUQG,yBAVR;AAYQC,sBAZR,GAYqB;AACfC,oBAAMF,aADS;AAEfG,sBAAQL;AAFO,aAZrB;AAiBQM,mBAjBR,GAiBkBC,gBAAgBJ,UAAhB,CAjBlB;;;AAmBIK,oBAAQC,GAAR,CAAY,WAAZ,EAAyBH,OAAzB;;AAEA;;AArBJ;AAAA,mBAuBU,mBAAQI,KAAR,CAAc,iBAAOd,SAArB,CAvBV;;AAAA;AAwBIe;;AAxBJ;AAAA;;AAAA;AAAA;AAAA;;AA2BIjB,mBAAOC,IAAP;;AA3BJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAegB,I;;;;;;wDAyIf,kBAAuBC,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA,8CAWSC,eAXT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,O;;;;;AA5Kf;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AAEA;;;;AACA;;;;;;ieAdA;;;AAiBA,IAAMb,cAAc,mBAAgB,iBAAOG,IAAvB,CAApB;AACA,IAAMN,gBAAgB,qBAAkB,iBAAOO,MAAzB,CAAtB;;AAEA,IAAMU,mBAAmB,cAAzB;;AAEA,IAAIC,kBAAkB,CAAtB;;AAGA;AACA,IAAMtB,SAAS,IAAI,kBAAQuB,MAAZ,GAAqBC,GAArB,CAAyB,kBAAQC,UAAR,CAAmBC,OAA5C,EAAqD;AAChEC,aAAW;AAAA,iBAAU,iBAAOC,GAAP,GAAaC,MAAb,CAAoBR,gBAApB,CAAV;AAAA,GADqD;AAEhES,YAAU,IAFsD;AAGhEC,eAAa,IAHmD;AAIhEC,SAAOC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC,MAAxC,GAAiD;AAJQ,CAArD,CAAf;;AAQAlB;;AAmCA,SAASJ,eAAT,CAAyBJ,UAAzB,EAAoC;;AAElC,MAAM2B,0BAA0B,iBAAOA,uBAAvC;AACA,MAAMC,2BAA2B,iBAAOA,wBAAxC;AACA,MAAMC,0BAA0B,iBAAOA,uBAAvC;;AAEA,MAAIC,iBAAiBC,kBAAkB/B,WAAWE,MAAX,CAAkB8B,IAApC,EAA0CL,uBAA1C,CAArB;AACA,MAAIM,eAAeF,kBAAkB/B,WAAWC,IAAX,CAAgB+B,IAAlC,EAAwCL,uBAAxC,CAAnB;AACA,MAAIO,iBAAiBC,kBAAkBnC,WAAWE,MAAX,CAAkBkC,IAApC,EAA0CT,uBAA1C,CAArB;AACA,MAAIU,eAAeF,kBAAkBnC,WAAWC,IAAX,CAAgBmC,IAAlC,EAAwCT,uBAAxC,CAAnB;;AAEApC,SAAOC,IAAP,sBAA+BsC,cAA/B;AACAvC,SAAOC,IAAP,oBAA6ByC,YAA7B;AACA1C,SAAOC,IAAP,sBAA+B0C,cAA/B;AACA3C,SAAOC,IAAP,oBAA6B6C,YAA7B;;AAEA,MAAMC,8BAA8B,iBAAOA,2BAA3C;AACA,MAAMC,4BAA4B,iBAAOA,yBAAzC;;AAEA,MAAMC,+BAAgC,CAACP,eAAeC,cAAhB,IAAgCA,cAAjC,GAAiD,GAAtF;AACA,MAAMO,iCAAkC,CAACX,iBAAiBO,YAAlB,IAAgCA,YAAjC,GAA+C,GAAtF;;AAEA,MAAMK,gCAAgCF,+BAA+BZ,wBAArE;AACA,MAAMe,kCAAkCF,iCAAiCZ,uBAAzE;;AAEA,MAAI1B,gBAAJ;AACA,MAAIyC,iCAAJ;AACA,MAAIC,6BAAJ;AACA,MAAIC,2BAAJ;;AAEAvD,SAAOC,IAAP,oCAA6CgD,4BAA7C;AACAjD,SAAOC,IAAP,sCAA+CiD,8BAA/C;;AAEA,MAAGC,6BAAH,EAAiC;;AAE/B,QAAIK,iBAAiBd,eAAaN,uBAAlC;AACA,QAAIqB,oBAAoBd,iBAAeP,uBAAvC;AACAkB,2BAAuBE,iBAAeC,iBAAtC;AACAJ,+BAA6BL,4BAA0B,GAA3B,GAAgCQ,cAAjC,GAAqDT,8BAA4B,GAA7B,GAAkCU,iBAAjH;AACAF,yBAAqBD,uBAAuBD,wBAA5C;;AAEArD,WAAOC,IAAP,wBAAiCuD,cAAjC;AACAxD,WAAOC,IAAP,2BAAoCwD,iBAApC;AACAzD,WAAOC,IAAP,8BAAuCqD,oBAAvC;AACAtD,WAAOC,IAAP,kCAA2CoD,wBAA3C;AACArD,WAAOC,IAAP,4BAAqCsD,kBAArC;;AAEA3C,cAAU;AACRF,YAAO;AACLQ,gBAAQ,MADH;AAELwC,kBAAUtB,uBAFL;AAGLuB,eAAO,KAHF;AAILC,cAAMlB;AAJD,OADC;AAOR/B,cAAQ;AACNO,gBAAQ,KADF;AAENwC,kBAAUtB,uBAFJ;AAGNuB,eAAO,KAHD;AAINC,cAAMjB;AAJA;AAPA,KAAV;AAcD,GA5BD,MA4BO,IAAIS,+BAAJ,EAAqC;;AAE1C,QAAII,kBAAiBjB,iBAAeH,uBAApC;AACA,QAAIqB,qBAAoBX,eAAaV,uBAArC;AACAkB,2BAAuBE,kBAAeC,kBAAtC;AACAJ,+BAA4BN,8BAA4BS,eAA7B,GAAgDR,4BAA0BS,kBAArG;AACAF,yBAAqBD,uBAAuBD,wBAA5C;;AAEArD,WAAOC,IAAP,wBAAiCuD,eAAjC;AACAxD,WAAOC,IAAP,2BAAoCwD,kBAApC;AACAzD,WAAOC,IAAP,8BAAuCqD,oBAAvC;AACAtD,WAAOC,IAAP,kCAA2CoD,wBAA3C;AACArD,WAAOC,IAAP,4BAAqCsD,kBAArC;;AAEA3C,cAAU;AACRD,cAAQ;AACNO,gBAAQ,MADF;AAENwC,kBAAUtB,uBAFJ;AAGNuB,eAAO,KAHD;AAINC,cAAMrB;AAJA,OADA;AAOR7B,YAAO;AACLQ,gBAAQ,KADH;AAELwC,kBAAUtB,uBAFL;AAGLuB,eAAO,KAHF;AAILC,cAAMd;AAJD;AAPC,KAAV;AAcD,GA5BM,MA4BD;AACJlC,cAAU,sBAAV;AACA,WAAOA,OAAP;AACD;;AAED,MAAIiD,8BAA8BC,0BAAlC;;AAEAhD,UAAQC,GAAR,CAAYH,QAAQiD,2BAAR,EAAqC3C,MAAjD;AACA,MAAGN,QAAQiD,2BAAR,EAAqC3C,MAArC,IAA+C,MAAlD,EAAyD;AACvD,WAAON,OAAP;AACD,GAFD,MAEO;AACL,WAAO,sBAAP;AACD;AACF;;AAmBD,SAASkD,wBAAT,GAAmC;;AAEjC;AACA;AACA,SAAO,MAAP;AAED;;AAED,SAAStB,iBAAT,CAA2BC,IAA3B,EAAiCL,uBAAjC,EAAyD;;AAEvD,MAAI2B,aAAatB,KAAKuB,IAAL,CAAU,UAACC,GAAD,EAAS;AAClC,WAAOC,WAAWD,IAAIE,MAAf,KAA0B/B,uBAAjC;AACD,GAFgB,CAAjB;;AAIA,SAAO8B,WAAWH,WAAWK,KAAtB,CAAP;AACD;;AAED,SAASxB,iBAAT,CAA2BC,IAA3B,EAAiCT,uBAAjC,EAAyD;;AAEvD,MAAI2B,aAAalB,KAAKmB,IAAL,CAAU,UAACK,GAAD,EAAS;AAClC,WAAOH,WAAWG,IAAIF,MAAf,KAA0B/B,uBAAjC;AACD,GAFgB,CAAjB;;AAKA,SAAO8B,WAAWH,WAAWK,KAAtB,CAAP;AACD","file":"index.js","sourcesContent":["// Poloniex API documentation: https://poloniex.com/support/api/\nimport fs from 'fs'\n\nimport autobahn from 'autobahn'\nimport program from 'commander'\nimport moment from 'moment'\nimport winston from 'winston'\nimport Promise from 'bluebird'\nimport request from 'request'\nimport rp from 'request-promise'\n\nimport config from './config'\n\nimport GdaxService from './services/gdax'\nimport GeminiService from './services/gemini'\n\n\nconst gdaxService = new GdaxService(config.gdax)\nconst geminiService = new GeminiService(config.gemini)\n\nconst TIMESTAMP_FORMAT = 'HH:mm:ss.SSS'\n\nlet aggregateProfit = 0\n\n\n// Initialize logger\nconst logger = new winston.Logger().add(winston.transports.Console, {\n    timestamp: () => `[${moment.utc().format(TIMESTAMP_FORMAT)}]`,\n    colorize: true,\n    prettyPrint: true,\n    level: process.env.NODE_ENV === 'production' ? 'info' : 'debug',\n})\n\n\nmain()\n\nasync function main(){\n\n  try {\n    logger.info('running arbitrage strategy...')\n\n    logger.info(`timeDelta is ${config.timeDelta}`)\n    logger.info(`tradeThreshold is ${config.tradeThreshold}`)\n\n    \n    let orderBookGemini = await geminiService.getOrderBook()\n    let orderBookGdax = await gdaxService.getOrderBook()\n\n    let orderBooks = {\n      gdax: orderBookGdax,\n      gemini: orderBookGemini\n    }\n\n    let actions = determineAction(orderBooks)\n\n    console.log('actions: ', actions)\n\n    // let results = execute(action)\n\n    await Promise.delay(config.timeDelta)\n    main()\n\n  } catch(err){\n    logger.info(`error: ${err}`)\n  }\n\n}\n\n\nfunction determineAction(orderBooks){\n\n  const ethereumTradingQuantity = config.ethereumTradingQuantity\n  const takeProfitTradeThreshold = config.takeProfitTradeThreshold\n  const swapFundsTradeThreshold = config.swapFundsTradeThreshold\n\n  let bidPriceGemini = calculateBidPrice(orderBooks.gemini.bids, ethereumTradingQuantity)\n  let bidPriceGdax = calculateBidPrice(orderBooks.gdax.bids, ethereumTradingQuantity)\n  let askPriceGemini = calculateAskPrice(orderBooks.gemini.asks, ethereumTradingQuantity)\n  let askPriceGdax = calculateAskPrice(orderBooks.gdax.asks, ethereumTradingQuantity)\n\n  logger.info(`bidPriceGemini: ${bidPriceGemini}`)\n  logger.info(`bidPriceGdax: ${bidPriceGdax}`)\n  logger.info(`askPriceGemini: ${askPriceGemini}`)\n  logger.info(`askPriceGdax: ${askPriceGdax}`)\n\n  const transactionPercentageGemini = config.transactionPercentageGemini\n  const transactionPercentageGdax = config.transactionPercentageGdax\n\n  const gdaxBasePercentageDifference = ((bidPriceGdax - askPriceGemini)/askPriceGemini)*100\n  const geminiBasePercentageDifference = ((bidPriceGemini - askPriceGdax)/askPriceGdax)*100\n\n  const gdaxRateIsHigherAndProfitable = gdaxBasePercentageDifference > takeProfitTradeThreshold\n  const geminiRateIsHigherAndProfitable = geminiBasePercentageDifference > swapFundsTradeThreshold\n\n  let actions\n  let estimatedTransactionFees\n  let estimatedGrossProfit\n  let estimatedNetProfit\n\n  logger.info(`gdaxBasePercentageDifference: ${gdaxBasePercentageDifference}`)\n  logger.info(`geminiBasePercentageDifference: ${geminiBasePercentageDifference}`)\n\n  if(gdaxRateIsHigherAndProfitable){\n\n    let totalSaleValue = bidPriceGdax*ethereumTradingQuantity\n    let totalPurchaseCost = askPriceGemini*ethereumTradingQuantity\n    estimatedGrossProfit = totalSaleValue-totalPurchaseCost\n    estimatedTransactionFees = ((transactionPercentageGdax/100)*totalSaleValue) + ((transactionPercentageGemini/100)*totalPurchaseCost)\n    estimatedNetProfit = estimatedGrossProfit - estimatedTransactionFees\n    \n    logger.info(`total sale value: ${totalSaleValue}`)\n    logger.info(`total purchase cost: ${totalPurchaseCost}`)\n    logger.info(`estimated gross profit: ${estimatedGrossProfit}`)\n    logger.info(`estimated transaction fees: ${estimatedTransactionFees}`)\n    logger.info(`estimated net profit: ${estimatedNetProfit}`)\n\n    actions = {\n      gdax : {\n        action: 'sell',\n        quantity: ethereumTradingQuantity,\n        units: 'eth',\n        rate: bidPriceGdax\n      },\n      gemini: {\n        action: 'buy',\n        quantity: ethereumTradingQuantity,\n        units: 'eth',\n        rate: askPriceGemini\n      }\n    }\n  } else if (geminiRateIsHigherAndProfitable) {\n\n    let totalSaleValue = bidPriceGemini*ethereumTradingQuantity\n    let totalPurchaseCost = askPriceGdax*ethereumTradingQuantity\n    estimatedGrossProfit = totalSaleValue-totalPurchaseCost\n    estimatedTransactionFees = (transactionPercentageGemini*totalSaleValue) + (transactionPercentageGdax*totalPurchaseCost)\n    estimatedNetProfit = estimatedGrossProfit - estimatedTransactionFees\n    \n    logger.info(`total sale value: ${totalSaleValue}`)\n    logger.info(`total purchase cost: ${totalPurchaseCost}`)\n    logger.info(`estimated gross profit: ${estimatedGrossProfit}`)\n    logger.info(`estimated transaction fees: ${estimatedTransactionFees}`)\n    logger.info(`estimated net profit: ${estimatedNetProfit}`)\n\n    actions = {\n      gemini: {\n        action: 'sell',\n        quantity: ethereumTradingQuantity,\n        units: 'eth',\n        rate: bidPriceGemini\n      },\n      gdax : {\n        action: 'buy',\n        quantity: ethereumTradingQuantity,\n        units: 'eth',\n        rate: askPriceGdax\n      }\n    }\n  } else{\n    actions = 'no trade opportunity'\n    return actions\n  }\n\n  let exchangeWithEthereumBalance = determineEthereumBalance()\n  \n  console.log(actions[exchangeWithEthereumBalance].action)\n  if(actions[exchangeWithEthereumBalance].action == 'sell'){\n    return actions\n  } else {\n    return 'no trade opportunity'\n  }\n}\n\nasync function execute(action){\n\n  // let results = \n\n  // // iterate over action object\n  // // sell on one exchange\n  // // and buy on the other\n\n\n\n  \n  return actionCompleted\n\n}\n\n\n\nfunction determineEthereumBalance(){\n\n  // check balances on both exchanges\n  // return name of exchange with ethereum balance (account to sell from)\n  return 'gdax'\n\n}\n\nfunction calculateBidPrice(bids, ethereumTradingQuantity){\n\n  let priceLevel = bids.find((bid) => {\n    return parseFloat(bid.amount) >= ethereumTradingQuantity\n  })\n\n  return parseFloat(priceLevel.price)\n}\n\nfunction calculateAskPrice(asks, ethereumTradingQuantity){\n\n  let priceLevel = asks.find((ask) => {\n    return parseFloat(ask.amount) >= ethereumTradingQuantity\n  })\n\n\n  return parseFloat(priceLevel.price)\n}\n\n"]}