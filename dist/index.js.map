{"version":3,"sources":["../src/index.js"],"names":["timeDelta","tradeThreshhold","logger","info","geminiService","getOrderBook","orderBookGemini","gdaxService","orderBookGdax","delay","main","exchange","console","log","uri","options","orderBook","error","firstOrderBook","secondOrderBook","resolve","calculatePriceDelta","gdax","gemini","TIMESTAMP_FORMAT","Logger","add","transports","Console","timestamp","utc","format","colorize","prettyPrint","level","process","env","NODE_ENV"],"mappings":";;;uDAsCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQA,qBAFR,GAEoB,IAFpB;AAGQC,2BAHR,GAG0B,GAH1B;;;AAKEC,mBAAOC,IAAP,CAAY,+BAAZ;AALF;AAAA,mBAM8BC,cAAcC,YAAd,EAN9B;;AAAA;AAMMC,2BANN;AAAA;AAAA,mBAO4BC,YAAYF,YAAZ,EAP5B;;AAAA;AAOMG,yBAPN;;AAQEN,mBAAOC,IAAP,CAAYG,eAAZ;AACAJ,mBAAOC,IAAP,CAAYK,aAAZ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAtBF;AAAA,mBAwBQ,mBAAQC,KAAR,CAAcT,SAAd,CAxBR;;AAAA;AAyBEU;;AAzBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeA,I;;;;;;wDA6Bf,kBAA4BC,QAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAGMC,oBAAQC,GAAR,8BAAuCF,QAAvC;;AAGIG,eANV;AAAA,2BAQcH,QARd;AAAA,8CASa,QATb,wBAYa,MAZb;AAAA;;AAAA;AAUUG,kBAAM,uCAAN;AAVV;;AAAA;AAaUA,kBAAM,oDAAN;AAbV;;AAAA;AAgBUZ,mBAAOC,IAAP,wBAAiCQ,QAAjC;;AAhBV;AAmBYI,mBAnBZ,GAmBsB;AACdD,mBAAKA;AADS,aAnBtB;;;AAuBMF,oBAAQC,GAAR,CAAYE,OAAZ;;AAvBN;AAAA,mBAyB4B,8BAAGA,OAAH,CAzB5B;;AAAA;AAyBUC,qBAzBV;;AA0BMJ,oBAAQC,GAAR,CAAYG,SAAZ;AA1BN,8CA2BaA,SA3Bb;;AAAA;AAAA;AAAA;;AA8BMd,mBAAOe,KAAP;;AA9BN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeZ,Y;;;;;;wDAkCf,kBAAmCa,cAAnC,EAAmDC,eAAnD;AAAA;AAAA;AAAA;AAAA;AAAA,8CACS,mBAAQC,OAAR,CAAgB,GAAhB,CADT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,mB;;;;;AAIfieAdA;;;AAgBAT,QAAQC,GAAR;;AAEA,IAAMN,cAAc,mBAAgB,iBAAOe,IAAvB,CAApB;AACA,IAAMlB,gBAAgB,qBAAkB,iBAAOmB,MAAzB,CAAtB;;AAEAX,QAAQC,GAAR;;AAEA,IAAMW,mBAAmB,cAAzB;;AAGA;AACA,IAAMtB,SAAS,IAAI,kBAAQuB,MAAZ,GACZC,GADY,CACR,kBAAQC,UAAR,CAAmBC,OADX,EACoB;AAC/BC,aAAW;AAAA,iBAAU,iBAAOC,GAAP,GAAaC,MAAb,CAAoBP,gBAApB,CAAV;AAAA,GADoB;AAE/BQ,YAAU,IAFqB;AAG/BC,eAAa,IAHkB;AAI/BC,SAAOC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC,MAAxC,GAAiD;AAJzB,CADpB,CAAf;;AASA3B","file":"index.js","sourcesContent":["// Poloniex API documentation: https://poloniex.com/support/api/\nimport fs from 'fs'\n\nimport autobahn from 'autobahn'\nimport program from 'commander'\nimport moment from 'moment'\nimport winston from 'winston'\nimport Promise from 'bluebird'\nimport request from 'request'\nimport rp from 'request-promise'\n\nimport config from './config'\n\nimport GdaxService from './services/gdax'\nimport GeminiService from './services/gemini'\n\nconsole.log(GdaxService)\n\nconst gdaxService = new GdaxService(config.gdax)\nconst geminiService = new GeminiService(config.gemini)\n\nconsole.log(config)\n\nconst TIMESTAMP_FORMAT = 'HH:mm:ss.SSS'\n\n\n// Initialize logger\nconst logger = new winston.Logger()\n  .add(winston.transports.Console, {\n    timestamp: () => `[${moment.utc().format(TIMESTAMP_FORMAT)}]`,\n    colorize: true,\n    prettyPrint: true,\n    level: process.env.NODE_ENV === 'production' ? 'info' : 'debug',\n  })\n\n\nmain()\n\nasync function main(){\n\n  const timeDelta = 2000\n  const tradeThreshhold = .01\n\n  logger.info('running arbitrage strategy...')\n  let orderBookGemini = await geminiService.getOrderBook()\n  let orderBookGdax = await gdaxService.getOrderBook()\n  logger.info(orderBookGemini)\n  logger.info(orderBookGdax)\n  // let orderBookGDAX = getOrderBook('gdax')\n\n  // let priceDelta = await calculatePriceDelta(orderBookGemini, orderBookGDAX)\n  // logger.info(`priceDelta is ${priceDelta}`)\n\n  // if(priceDelta > tradeThreshhold){\n  //   logger.info('making money today!')\n  // }\n\n  //poll order book from both gemini and gdax\n  //compare prices of both\n  //if a delta is present more than x percent AND dollars are in the exchange with the lower rate\n  //then sell ethereum on higher exchange and buy same amount of ethereum on lower exchange\n\n  await Promise.delay(timeDelta)\n  main()\n}\n\n\nasync function getOrderBook(exchange){\n    try{\n\n      console.log(`getting order book from ${exchange}`)\n    \n\n      let uri\n\n      switch (exchange) {\n        case 'gemini':\n          uri = 'https://api.gemini.com/v1/book/ethusd'\n          break\n        case 'gdax':\n          uri = 'https://api.gdax.com/products/ETH-USD/book?level=2'\n          break\n        default:\n          logger.info(`Unknown exchange: ${exchange}`)\n      }\n\n      const options = {\n        uri: uri,\n      }\n\n      console.log(options)\n\n      let orderBook = await rp(options)\n      console.log(orderBook)\n      return orderBook\n\n    } catch(err){\n      logger.error(err)\n    }\n  }\n\nasync function calculatePriceDelta(firstOrderBook, secondOrderBook){\n  return Promise.resolve(.04)\n}\n\n// async function getOrderBook(){\n\n//   try{\n//     const options = {\n//       uri: `https://poloniex.com/public?command=returnOrderBook&currencyPair=${currencyPair}&depth=100`,\n//       json: true // Automatically parses the JSON string in the response\n//     }\n\n//     let orderBook = await rp(options)\n//     return orderBook\n\n//   } catch(err){\n//     logger.error(err)\n//   }\n// }\n\n\n// // Initialize the program (with args)\n// program\n//   .version('0.1.0')\n//   .usage('[options] <pair>')\n//   .arguments('<pair>')\n//   .action((pair) => { currencyPair = pair.toUpperCase().trim() })\n//   .option('-o --out [file]', 'Output file')\n//   .option('-a --append', 'Append to output file (default: false)', false)\n//   .option('-q --quiet', 'Quiet mode (default: false)', false)\n//   .parse(process.argv)\n\n// // Currency pair is required\n// if (!CURRENCY_PAIR_REGEX.test(currencyPair)) {\n//   console.error('Missing or invalid currency pair')\n//   process.exit(1)\n// }\n\n// // Initialize logger\n// const logger = new winston.Logger()\n//   .add(winston.transports.Console, {\n//     timestamp: () => `[${moment.utc().format(TIMESTAMP_FORMAT)}]`,\n//     colorize: true,\n//     prettyPrint: true,\n//     level: process.env.NODE_ENV === 'production' ? 'info' : 'debug',\n//   })\n\n// // If output file was specified, try to create a writeable stream\n// if (program.out) {\n//   try {\n//     const fileOptions = { flags: program.append ? 'a': 'w' }\n//     outputStream = fs.createWriteStream(program.out, fileOptions)\n//     logger.info(`Writing updates to file '${program.out}'...`)\n//   } catch (err) {\n//     logger.error(`Unable to create file '${program.out}':`, err)\n//     process.exit(1)\n//   }\n// }\n\n// function writeEventToFile(eventData) {\n//   const line = JSON.stringify(eventData || {})\n\n//   if (!program.quiet) {\n//     logger.info(line)\n//   }\n//   if (outputStream) {\n//     outputStream.write(`${line}\\n`)\n//   }\n// }\n\n// // Handles ticker update events\n// function handleTickerData(args, metadata) {\n//   const timestamp = new Date().toISOString()\n//   const [pair, astPrice, lowestAsk, highestBid, percentChange, baseVolume, quoteVolume, isFrozen, dailyHigh, dailyLow] = args\n\n//   // Ignore other currency pairs\n//   if (pair !== currencyPair) {\n//     return\n//   }\n\n//   const eventData = {\n//     sequence: 0,\n//     event: 'ticker',\n//     timestamp,\n//     currencyPair: pair,\n//     lowestAsk,\n//     highestBid,\n//     percentChange,\n//     baseVolume,\n//     quoteVolume,\n//     isFrozen: !!isFrozen,\n//     '24hourHigh': dailyHigh,\n//     '24hourLow': dailyLow\n//   }\n\n//   writeEventToFile(eventData)\n// }\n\n// // Handles market update events (order book and trades)\n// function handleMarketData(args, metadata) {\n//   for (const event of args) {\n//     const { type, data } = event\n//     let eventData = {\n//         sequence: metadata.seq,\n//         timestamp: new Date().toISOString(),\n//         event: type\n//       }\n\n//     switch (type) {\n//       case EVENT_ORDER_BOOK_MODIFY:\n//       const total = parseFloat(data.rate * data.amount).toFixed(8)\n//         eventData = { ...eventData, ...data, total }\n//         break\n//       case EVENT_ORDER_BOOK_REMOVE:\n//         eventData = { ...eventData, ...data }\n//         break\n//       case EVENT_NEW_TRADE:\n//         eventData = { ...eventData, ...data }\n//         break\n//       default:\n//         logger.warn(`Unknown event '${type}': ${JSON.stringify(data)}`)\n//         continue\n//     }\n\n//     writeEventToFile(eventData)\n//   }\n// }\n\n// async function getOrderBook(){\n\n//   try{\n//     const options = {\n//       uri: `https://poloniex.com/public?command=returnOrderBook&currencyPair=${currencyPair}&depth=100`,\n//       json: true // Automatically parses the JSON string in the response\n//     }\n\n//     let orderBook = await rp(options)\n//     return orderBook\n\n//   } catch(err){\n//     logger.error(err)\n//   }\n// }\n\n// async function saveOrderBookRecursive(orderBookUpdateFrequency){\n\n//   while(true){\n//     const orderBook = await getOrderBook()\n\n//     let eventData = {\n//         timestamp: new Date().toISOString(),\n//         event: 'newOrderBook',\n//         orderBook: orderBook\n//     }\n\n//     writeEventToFile(eventData)\n\n//     await Promise.delay(orderBookUpdateFrequency*1000)\n//   }\n// }\n\n// // Create WAMP socket for real-time API updates\n// const socket = new autobahn.Connection({\n//   url: POLONIEX_API_URL,\n//   realm: POLONIEX_API_REALM\n// })\n\n// const orderBookUpdateFrequency = 1\n\n// socket.onopen = (session) => {\n//   logger.info(`Connected to Poloniex push API successfully.`)\n\n//   saveOrderBookRecursive(orderBookUpdateFrequency)\n\n//   logger.info('Subscribed to ticker events.')\n//   session.subscribe('ticker', handleTickerData)\n\n//   logger.info(`Subscribed to ${currencyPair} events.`)\n//   session.subscribe(currencyPair, handleMarketData)\n// }\n\n// socket.onclose = (reason) => {\n//   logger.info(`Disconnected from Poloniex push API (${reason}).`)\n// }\n\n// logger.info('Connecting to Poloniex push API...')\n// socket.open()\n"]}