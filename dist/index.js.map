{"version":3,"sources":["../src/index.js"],"names":["logger","info","timeDelta","tradeThreshold","geminiService","getOrderBook","orderBookGemini","gdaxService","orderBookGdax","orderBooks","gdax","gemini","actions","determineAction","console","log","delay","main","action","execute","TIMESTAMP_FORMAT","Logger","add","transports","Console","timestamp","utc","format","colorize","prettyPrint","level","process","env","NODE_ENV","ethereumTradingQuantity","bidPriceGemini","calculateBidPrice","bids","bidPriceGdax","askPriceGemini","calculateAskPrice","asks","askPriceGdax","quantity","units","rate","exchangeWithEthereumBalance","determineEthereumBalance","priceLevel","find","bid","parseFloat","amount","price","ask"],"mappings":"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","file":"index.js","sourcesContent":["// Poloniex API documentation: https://poloniex.com/support/api/\nimport fs from 'fs'\n\nimport autobahn from 'autobahn'\nimport program from 'commander'\nimport moment from 'moment'\nimport winston from 'winston'\nimport Promise from 'bluebird'\nimport request from 'request'\nimport rp from 'request-promise'\n\nimport config from './config'\n\nimport GdaxService from './services/gdax'\nimport GeminiService from './services/gemini'\n\n\nconst gdaxService = new GdaxService(config.gdax)\nconst geminiService = new GeminiService(config.gemini)\n\nconst TIMESTAMP_FORMAT = 'HH:mm:ss.SSS'\n\n\n// Initialize logger\nconst logger = new winston.Logger().add(winston.transports.Console, {\n    timestamp: () => `[${moment.utc().format(TIMESTAMP_FORMAT)}]`,\n    colorize: true,\n    prettyPrint: true,\n    level: process.env.NODE_ENV === 'production' ? 'info' : 'debug',\n})\n\n\nmain()\n\nasync function main(){\n\n  logger.info('running arbitrage strategy...')\n\n  logger.info(`timeDelta is ${config.timeDelta}`)\n  logger.info(`tradeThreshold is ${config.tradeThreshold}`)\n\n  \n  let orderBookGemini = await geminiService.getOrderBook()\n  let orderBookGdax = await gdaxService.getOrderBook()\n\n  let orderBooks = {\n    gdax: orderBookGdax,\n    gemini: orderBookGemini\n  }\n\n  let actions = determineAction(orderBooks)\n\n  console.log('actions: ', actions)\n\n  // let results = execute(action)\n\n\n  await Promise.delay(config.timeDelta)\n  main()\n}\n\n\nfunction determineAction(orderBooks){\n\n  const ethereumTradingQuantity = config.ethereumTradingQuantity\n  const tradeThreshold = config.tradeThreshold\n\n  let bidPriceGemini = calculateBidPrice(orderBooks.gemini.bids, ethereumTradingQuantity)\n  let bidPriceGdax = calculateBidPrice(orderBooks.gdax.bids, ethereumTradingQuantity)\n\n  let askPriceGemini = calculateAskPrice(orderBooks.gemini.asks, ethereumTradingQuantity)\n  let askPriceGdax = calculateAskPrice(orderBooks.gdax.asks, ethereumTradingQuantity)\n\n  let actions\n\n  if(bidPriceGdax > (askPriceGemini + tradeThreshold)){\n    actions = {\n      gdax : {\n        action: 'sell',\n        quantity: ethereumTradingQuantity,\n        units: 'eth',\n        rate: bidPriceGdax\n      },\n      gemini: {\n        action: 'buy',\n        quantity: ethereumTradingQuantity,\n        units: 'eth',\n        rate: askPriceGemini\n      }\n    }\n  } else if (bidPriceGemini > (askPriceGdax + tradeThreshold)) {\n    actions = {\n      gemini: {\n        action: 'sell',\n        quantity: ethereumTradingQuantity,\n        units: 'eth',\n        rate: bidPriceGemini\n      },\n      gdax : {\n        action: 'buy',\n        quantity: ethereumTradingQuantity,\n        units: 'eth',\n        rate: askPriceGdax\n      }\n    }\n  } else{\n    actions = 'no trade opportunity'\n    return action\n  }\n\n  let exchangeWithEthereumBalance = determineEthereumBalance()\n  // console.log('action: ', action)\n\n\n  console.log(actions[exchangeWithEthereumBalance].action)\n  if(actions[exchangeWithEthereumBalance].action == 'sell'){\n    return actions\n  } else {\n    return 'no trade opportunity'\n  }\n}\n\nasync function execute(action){\n\n  // let results = \n\n  // // iterate over action object\n  // // sell on one exchange\n  // // and buy on the other\n\n\n\n  \n  // return actionCompleted\n\n}\n\n\n\nfunction determineEthereumBalance(){\n\n  // check balances on both exchanges\n  // return name of exchange with ethereum balance (account to sell from)\n  return 'gdax'\n\n}\n\nfunction calculateBidPrice(bids, ethereumTradingQuantity){\n\n  let priceLevel = bids.find((bid) => {\n    return parseFloat(bid.amount) >= ethereumTradingQuantity\n  })\n\n  return priceLevel.price\n}\n\nfunction calculateAskPrice(asks, ethereumTradingQuantity){\n\n  let priceLevel = asks.find((ask) => {\n    return parseFloat(ask.amount) >= ethereumTradingQuantity\n  })\n\n\n  return priceLevel.price\n}\n\n"]}