{"version":3,"sources":["../src/index.js"],"names":["console","log","info","geminiService","getOrderBook","orderBookGemini","gdaxService","orderBookGdax","orderBooks","gdax","gemini","determinePositionChange","positionChange","execute","tradeResults","gdaxResults","geminiResults","buyValue","sellValue","takeProfit","price","amount","fee","profit","action","cancelOrders","process","exit","delay","timeDelta","main","ethereumTradingQuantity","takeProfitTradeThreshold","swapFundsTradeThreshold","bidPriceGemini","calculateBidPrice","bids","bidPriceGdax","askPriceGemini","calculateAskPrice","asks","askPriceGdax","transactionPercentageGemini","transactionPercentageGdax","gdaxBasePercentageDifference","geminiBasePercentageDifference","gdaxRateIsHigherAndProfitable","geminiRateIsSwappable","estimatedTransactionFees","estimatedGrossProfit","estimatedNetProfit","totalSaleValue","totalPurchaseCost","quantity","units","rate","determineCurrentEthereumPosition","exchangeWithEthereumBalance","all","executeTrade","tradeLog","availableBalances","currentGeminiBalances","geminiUsdBalance","filter","accountDetails","currency","parseFloat","geminiEthBalance","currentGdaxBalances","gdaxUsdBalance","balance","gdaxEthBalance","ethereumBalance","logger","priceLevel"],"mappings":";;;;;uDAoBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGIA,oBAAQC,GAAR,CAAY,EAAZ;AACAD,oBAAQC,GAAR,CAAY,EAAZ;AACA,6BAAOC,IAAP,CAAY,+BAAZ;;AALJ;AAAA,mBAQgCC,cAAcC,YAAd,EARhC;;AAAA;AAQQC,2BARR;AAAA;AAAA,mBAS8BC,YAAYF,YAAZ,EAT9B;;AAAA;AASQG,yBATR;AAWQC,sBAXR,GAWqB;AACfC,oBAAMF,aADS;AAEfG,sBAAQL;AAFO,aAXrB;AAAA;AAAA,mBAgB+BM,wBAAwBH,UAAxB,CAhB/B;;AAAA;AAgBQI,0BAhBR;;AAAA,kBAkBOA,kBAAkB,MAlBzB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,mBAsB6BC,QAAQD,cAAR,CAtB7B;;AAAA;AAsBQE,wBAtBR;AAwBQC,uBAxBR,GAwBsBD,aAAaL,IAxBnC;AAyBQO,yBAzBR,GAyBwBF,aAAaJ,MAzBrC;;AA2BI;;AAEIO,oBA7BR;AA8BQC,qBA9BR;AAAA,0BAgCWJ,aAAaK,UAhCxB;AAAA,4CAiCW,MAjCX,wBAsCW,QAtCX;AAAA;;AAAA;AAkCQF,uBAAYH,aAAaJ,MAAb,CAAoBU,KAApB,GAA0BN,aAAaJ,MAAb,CAAoBW,MAA/C,GAAyDP,aAAaJ,MAAb,CAAoBY,GAAxF;AACAJ,wBAAaJ,aAAaL,IAAb,CAAkBW,KAAlB,GAAwBN,aAAaL,IAAb,CAAkBY,MAA3C,GAAqDP,aAAaL,IAAb,CAAkBa,GAAnF;AAnCR;;AAAA;AAuCQJ,wBAAaJ,aAAaJ,MAAb,CAAoBU,KAApB,GAA0BN,aAAaJ,MAAb,CAAoBW,MAA/C,GAAyDP,aAAaJ,MAAb,CAAoBY,GAAzF;AACAL,uBAAYH,aAAaL,IAAb,CAAkBW,KAAlB,GAAwBN,aAAaL,IAAb,CAAkBY,MAA3C,GAAqDP,aAAaL,IAAb,CAAkBa,GAAlF;AAxCR;;AAAA;AA4CQC,kBA5CR,GA4CiB,CAACL,YAAYD,QAAb,IAAyBA,QA5C1C;;;AA8CI,6BAAOf,IAAP,iBAA0BY,aAAaL,IAAb,CAAkBe,MAA5C,qBAAkEV,aAAaL,IAAb,CAAkBY,MAApF,sBAA2GP,aAAaL,IAAb,CAAkBW,KAA7H,qBAAkJN,aAAaL,IAAb,CAAkBa,GAApK;AACA,6BAAOpB,IAAP,iBAA0BY,aAAaJ,MAAb,CAAoBc,MAA9C,uBAAsEV,aAAaJ,MAAb,CAAoBW,MAA1F,qBAAgHP,aAAaJ,MAAb,CAAoBU,KAApI,qBAAyJN,aAAaJ,MAAb,CAAoBY,GAA7K;AACA,6BAAOpB,IAAP,yBAAkCqB,MAAlC;;AAhDJ;AAAA;;AAAA;AAAA;AAAA;;AAmDI,6BAAOrB,IAAP;AACAC,0BAAcsB,YAAd;AACAnB,wBAAYmB,YAAZ;AACAC,oBAAQC,IAAR;;AAtDJ;AAAA;AAAA;AAAA,mBAwDU,mBAAQC,KAAR,CAAc,iBAAOC,SAArB,CAxDV;;AAAA;AAyDIC;AAzDJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeA,I;;;;;;wDA8Df,kBAAuCtB,UAAvC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEQuB,mCAFR,GAEkC,iBAAOA,uBAFzC;AAGQC,oCAHR,GAGmC,iBAAOA,wBAH1C;AAIQC,mCAJR,GAIkC,iBAAOA,uBAJzC;AAMMC,0BANN,GAMuBC,kBAAkB3B,WAAWE,MAAX,CAAkB0B,IAApC,EAA0CL,uBAA1C,CANvB;AAOMM,wBAPN,GAOqBF,kBAAkB3B,WAAWC,IAAX,CAAgB2B,IAAlC,EAAwCL,uBAAxC,CAPrB;AAQMO,0BARN,GAQuBC,kBAAkB/B,WAAWE,MAAX,CAAkB8B,IAApC,EAA0CT,uBAA1C,CARvB;AASMU,wBATN,GASqBF,kBAAkB/B,WAAWC,IAAX,CAAgB+B,IAAlC,EAAwCT,uBAAxC,CATrB;;;AAWE,6BAAO7B,IAAP,sBAA+BgC,cAA/B;AACA,6BAAOhC,IAAP,oBAA6BmC,YAA7B;AACA,6BAAOnC,IAAP,sBAA+BoC,cAA/B;AACA,6BAAOpC,IAAP,oBAA6BuC,YAA7B;;AAEMC,uCAhBR,GAgBsC,iBAAOA,2BAhB7C;AAiBQC,qCAjBR,GAiBoC,iBAAOA,yBAjB3C;AAmBQC,wCAnBR,GAmBwC,CAACP,eAAeC,cAAhB,IAAgCA,cAAjC,GAAiD,GAnBxF;AAoBQO,0CApBR,GAoB0C,CAACX,iBAAiBO,YAAlB,IAAgCA,YAAjC,GAA+C,GApBxF;AAsBQK,yCAtBR,GAsBwCF,+BAA+BZ,wBAtBvE;AAuBQe,iCAvBR,GAuBgCF,iCAAiCZ,uBAvBjE;AAyBMrB,0BAzBN;AA0BMoC,oCA1BN;AA2BMC,gCA3BN;AA4BMC,8BA5BN;;;AA8BE,6BAAOhD,IAAP,oCAA6C0C,4BAA7C;AACA,6BAAO1C,IAAP,sCAA+C2C,8BAA/C;;AA/BF,iBAiCKC,6BAjCL;AAAA;AAAA;AAAA;;AAkCI,6BAAO5C,IAAP,CAAY,oCAAZ;;AAEIiD,0BApCR,GAoCyBd,eAAaN,uBApCtC;AAqCQqB,6BArCR,GAqC4Bd,iBAAeP,uBArC3C;;AAsCIkB,mCAAuBE,iBAAeC,iBAAtC;AACAJ,uCAA6BL,4BAA0B,GAA3B,GAAgCQ,cAAjC,GAAqDT,8BAA4B,GAA7B,GAAkCU,iBAAjH;AACAF,iCAAqBD,uBAAuBD,wBAA5C;;AAEA,6BAAO9C,IAAP,kCAA2CiD,cAA3C;AACA,6BAAOjD,IAAP,qCAA8CkD,iBAA9C;AACA,6BAAOlD,IAAP,8BAAuC+C,oBAAvC;AACA,6BAAO/C,IAAP,kCAA2C8C,wBAA3C;AACA,6BAAO9C,IAAP,4BAAqCgD,kBAArC;;AAEAtC,6BAAiB;AACfO,0BAAY,MADG;AAEfV,oBAAO;AACLe,wBAAQ,MADH;AAEL6B,0BAAUtB,uBAFL;AAGLuB,uBAAO,KAHF;AAILC,sBAAMlB;AAJD,eAFQ;AAQf3B,sBAAQ;AACNc,wBAAQ,KADF;AAEN6B,0BAAUtB,uBAFJ;AAGNuB,uBAAO,KAHD;AAINC,sBAAMjB;AAJA;AARO,aAAjB;AAhDJ;AAAA;;AAAA;AAAA,iBA+DaS,qBA/Db;AAAA;AAAA;AAAA;;AAgEI,6BAAO7C,IAAP,CAAY,sCAAZ;;AAEIiD,2BAlER,GAkEyBjB,iBAAeH,uBAlExC;AAmEQqB,8BAnER,GAmE4BX,eAAaV,uBAnEzC;;AAoEIkB,mCAAuBE,kBAAeC,kBAAtC;AACAJ,uCAA6BN,8BAA4B,GAA7B,GAAkCS,eAAnC,GAAuDR,4BAA0B,GAA3B,GAAgCS,kBAAjH;AACAF,iCAAqBD,uBAAuBD,wBAA5C;;AAEA,6BAAO9C,IAAP,kCAA2CiD,eAA3C;AACA,6BAAOjD,IAAP,qCAA8CkD,kBAA9C;AACA,6BAAOlD,IAAP,8BAAuC+C,oBAAvC;AACA,6BAAO/C,IAAP,kCAA2C8C,wBAA3C;AACA,6BAAO9C,IAAP,4BAAqCgD,kBAArC;;AAEAtC,6BAAgB;AACdO,0BAAY,QADE;AAEdT,sBAAQ;AACNc,wBAAQ,MADF;AAEN6B,0BAAUtB,uBAFJ;AAGNuB,uBAAO,KAHD;AAINC,sBAAMrB;AAJA,eAFM;AAQdzB,oBAAO;AACLe,wBAAQ,KADH;AAEL6B,0BAAUtB,uBAFL;AAGLuB,uBAAO,KAHF;AAILC,sBAAMd;AAJD;AARO,aAAhB;AA9EJ;AAAA;;AAAA;AA8FI7B,6BAAiB,MAAjB;AA9FJ,8CA+FWA,cA/FX;;AAAA;AAAA;AAAA,mBAkG0C4C,kCAlG1C;;AAAA;AAkGMC,uCAlGN;;AAAA,kBAoGK7C,eAAe6C,2BAAf,EAA4CjC,MAA5C,IAAsD,MApG3D;AAAA;AAAA;AAAA;;AAAA,8CAqGWZ,cArGX;;AAAA;AAAA,8CAuGW,MAvGX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeD,uB;;;;;;wDA2Gf,kBAAuBC,cAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAE2B,mBAAQ8C,GAAR,CAAY,CAACpD,YAAYqD,YAAZ,CAAyB/C,cAAzB,CAAD,EAA2CT,cAAcwD,YAAd,CAA2B/C,cAA3B,CAA3C,CAAZ,CAF3B;;AAAA;AAEME,wBAFN;;AAGE;;AAEI8C,oBALN,GAKiB;AACbnD,oBAAMK,aAAa,CAAb,CADO;AAEbJ,sBAAQI,aAAa,CAAb,CAFK;AAGbK,0BAAYP,eAAeO;AAHd,aALjB;AAAA,8CAWSyC,QAXT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAe/C,O;;;;;;wDAcf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGoCV,cAAc0D,iBAAd,EAHpC;;AAAA;AAGMC,iCAHN;AAKMC,4BALN,GAKyBD,sBAAsBE,MAAtB,CAA6B;AAAA,qBAAkBC,eAAeC,QAAf,IAA2B,KAA7C;AAAA,aAA7B,CALzB;;AAMEH,+BAAmBI,WAAWJ,iBAAiB,CAAjB,EAAoB1C,MAA/B,CAAnB;;AAEI+C,4BARN,GAQyBN,sBAAsBE,MAAtB,CAA6B;AAAA,qBAAkBC,eAAeC,QAAf,IAA2B,KAA7C;AAAA,aAA7B,CARzB;;AASEE,+BAAmBD,WAAWC,iBAAiB,CAAjB,EAAoB/C,MAA/B,CAAnB;;AAEA;AAXF;AAAA,mBAYkCf,YAAYuD,iBAAZ,EAZlC;;AAAA;AAYMQ,+BAZN;AAcMC,0BAdN,GAcuBD,oBAAoBL,MAApB,CAA2B,UAACC,cAAD;AAAA,qBAAoBA,eAAeC,QAAf,IAA2B,KAA/C;AAAA,aAA3B,CAdvB;;AAeEI,6BAAiBH,WAAWG,eAAe,CAAf,EAAkBC,OAA7B,CAAjB;;AAEIC,0BAjBN,GAiBuBH,oBAAoBL,MAApB,CAA2B,UAACC,cAAD;AAAA,qBAAoBA,eAAeC,QAAf,IAA2B,KAA/C;AAAA,aAA3B,CAjBvB;;AAkBEM,6BAAiBL,WAAWK,eAAe,CAAf,EAAkBD,OAA7B,CAAjB;;AAEA,6BAAOrE,IAAP,wBAAiCkE,gBAAjC;AACA,6BAAOlE,IAAP,wBAAiC6D,gBAAjC;AACA,6BAAO7D,IAAP,sBAA+BsE,cAA/B;AACA,6BAAOtE,IAAP,sBAA+BoE,cAA/B;;AAEIG,2BAzBN;;AA0BE,gBAAGL,mBAAmBI,cAAtB,EAAqC;AACnCC,gCAAkB,QAAlB;AACD,aAFD,MAEO,IAAID,iBAAiBJ,gBAArB,EAAsC;AAC3CK,gCAAkB,MAAlB;AACD;;AAED,6BAAOvE,IAAP,6BAAsCuE,eAAtC;;AAhCF,8CAkCSA,eAlCT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAejB,gC;;;;;AA3Mf;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AAEA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAMlD,cAAc,gCAAoB,iBAAOG,IAA3B,IAAiCiE,wBAAjC,IAApB;AACA,IAAMvE,gBAAgB,kCAAsB,iBAAOO,MAA7B,IAAqCgE,wBAArC,IAAtB;;AAEA5C;;AA8NA,SAASK,iBAAT,CAA2BC,IAA3B,EAAiCL,uBAAjC,EAAyD;;AAEvD;AACA;AACA;AACA,MAAI4C,aAAavC,KAAK,CAAL,CAAjB;;AAEA,SAAOuC,aAAaR,WAAWQ,WAAWvD,KAAtB,CAAb,GAA4C,gBAAnD;AACD;;AAED,SAASmB,iBAAT,CAA2BC,IAA3B,EAAiCT,uBAAjC,EAAyD;;AAEvD;AACA;AACA;AACA,MAAI4C,aAAanC,KAAK,CAAL,CAAjB;;AAEA,SAAOmC,aAAaR,WAAWQ,WAAWvD,KAAtB,CAAb,GAA4C,gBAAnD;AACD","file":"index.js","sourcesContent":["import fs from 'fs'\nimport autobahn from 'autobahn'\nimport program from 'commander'\nimport moment from 'moment'\nimport winston from 'winston'\nimport Promise from 'bluebird'\nimport request from 'request'\nimport rp from 'request-promise'\n\nimport config from './config'\n\nimport GdaxService from './services/gdax'\nimport GeminiService from './services/gemini'\nimport logger from './services/logger.js'\n\nconst gdaxService = new GdaxService({...config.gdax, logger, })\nconst geminiService = new GeminiService({...config.gemini, logger})\n\nmain()\n\nasync function main(){\n\n  try {\n    console.log('')\n    console.log('')\n    logger.info('running arbitrage strategy...')\n \n\n    let orderBookGemini = await geminiService.getOrderBook()\n    let orderBookGdax = await gdaxService.getOrderBook()\n\n    let orderBooks = {\n      gdax: orderBookGdax,\n      gemini: orderBookGemini\n    }\n\n    let positionChange = await determinePositionChange(orderBooks)\n\n    if(positionChange == 'none'){\n      return \n    }\n    \n    let tradeResults = await execute(positionChange)\n\n    let gdaxResults = tradeResults.gdax\n    let geminiResults = tradeResults.gemini\n\n    //check here for results from each exchage. If either is bad then process.exit and cancel all orders on both exchanges.\n\n    let buyValue\n    let sellValue\n\n    switch(tradeResults.takeProfit){\n      case 'gdax':\n        buyValue = (tradeResults.gemini.price*tradeResults.gemini.amount) - tradeResults.gemini.fee\n        sellValue = (tradeResults.gdax.price*tradeResults.gdax.amount) - tradeResults.gdax.fee\n        break\n  \n      case 'gemini':\n        sellValue = (tradeResults.gemini.price*tradeResults.gemini.amount) - tradeResults.gemini.fee\n        buyValue = (tradeResults.gdax.price*tradeResults.gdax.amount) - tradeResults.gdax.fee\n        break\n    }\n    \n    let profit = (sellValue - buyValue) / buyValue\n    \n    logger.info(`successful ${tradeResults.gdax.action} on Gdax for ${tradeResults.gdax.amount} ethereum at $${tradeResults.gdax.price}/eth, fee of ${tradeResults.gdax.fee}`)\n    logger.info(`successful ${tradeResults.gemini.action} on Gemini for ${tradeResults.gemini.amount} ethereum at ${tradeResults.gemini.price}/eth, fee of ${tradeResults.gemini.fee}`)\n    logger.info(`profit percentage: ${profit}`)\n    \n  } catch(err){\n    logger.info(`error: ${err}`)\n    geminiService.cancelOrders()\n    gdaxService.cancelOrders()\n    process.exit()\n  } finally{\n    await Promise.delay(config.timeDelta)\n    main()\n  }\n\n}\n\nasync function determinePositionChange(orderBooks){\n\n  const ethereumTradingQuantity = config.ethereumTradingQuantity\n  const takeProfitTradeThreshold = config.takeProfitTradeThreshold\n  const swapFundsTradeThreshold = config.swapFundsTradeThreshold\n\n  let bidPriceGemini = calculateBidPrice(orderBooks.gemini.bids, ethereumTradingQuantity)\n  let bidPriceGdax = calculateBidPrice(orderBooks.gdax.bids, ethereumTradingQuantity)\n  let askPriceGemini = calculateAskPrice(orderBooks.gemini.asks, ethereumTradingQuantity)\n  let askPriceGdax = calculateAskPrice(orderBooks.gdax.asks, ethereumTradingQuantity)\n\n  logger.info(`bidPriceGemini: ${bidPriceGemini}`)\n  logger.info(`bidPriceGdax: ${bidPriceGdax}`)\n  logger.info(`askPriceGemini: ${askPriceGemini}`)\n  logger.info(`askPriceGdax: ${askPriceGdax}`)\n\n  const transactionPercentageGemini = config.transactionPercentageGemini\n  const transactionPercentageGdax = config.transactionPercentageGdax\n\n  const gdaxBasePercentageDifference = ((bidPriceGdax - askPriceGemini)/askPriceGemini)*100\n  const geminiBasePercentageDifference = ((bidPriceGemini - askPriceGdax)/askPriceGdax)*100\n\n  const gdaxRateIsHigherAndProfitable = gdaxBasePercentageDifference > takeProfitTradeThreshold\n  const geminiRateIsSwappable = geminiBasePercentageDifference > swapFundsTradeThreshold\n\n  let positionChange\n  let estimatedTransactionFees\n  let estimatedGrossProfit\n  let estimatedNetProfit\n\n  logger.info(`gdaxBasePercentageDifference: ${gdaxBasePercentageDifference}`)\n  logger.info(`geminiBasePercentageDifference: ${geminiBasePercentageDifference}`)\n\n  if(gdaxRateIsHigherAndProfitable){\n    logger.info('gdax rate is higher and profitable')\n\n    let totalSaleValue = bidPriceGdax*ethereumTradingQuantity\n    let totalPurchaseCost = askPriceGemini*ethereumTradingQuantity\n    estimatedGrossProfit = totalSaleValue-totalPurchaseCost\n    estimatedTransactionFees = ((transactionPercentageGdax/100)*totalSaleValue) + ((transactionPercentageGemini/100)*totalPurchaseCost)\n    estimatedNetProfit = estimatedGrossProfit - estimatedTransactionFees\n    \n    logger.info(`estimated total sale value: ${totalSaleValue}`)\n    logger.info(`estimated total purchase cost: ${totalPurchaseCost}`)\n    logger.info(`estimated gross profit: ${estimatedGrossProfit}`)\n    logger.info(`estimated transaction fees: ${estimatedTransactionFees}`)\n    logger.info(`estimated net profit: ${estimatedNetProfit}`)\n\n    positionChange = {\n      takeProfit: 'gdax',\n      gdax : {\n        action: 'sell',\n        quantity: ethereumTradingQuantity,\n        units: 'eth',\n        rate: bidPriceGdax\n      },\n      gemini: {\n        action: 'buy',\n        quantity: ethereumTradingQuantity,\n        units: 'eth',\n        rate: askPriceGemini\n      }\n    }\n  } else if (geminiRateIsSwappable) {\n    logger.info('Gemini rate is higher and profitable')\n\n    let totalSaleValue = bidPriceGemini*ethereumTradingQuantity\n    let totalPurchaseCost = askPriceGdax*ethereumTradingQuantity\n    estimatedGrossProfit = totalSaleValue-totalPurchaseCost\n    estimatedTransactionFees = ((transactionPercentageGemini/100)*totalSaleValue) + ((transactionPercentageGdax/100)*totalPurchaseCost)\n    estimatedNetProfit = estimatedGrossProfit - estimatedTransactionFees\n    \n    logger.info(`estimated total sale value: ${totalSaleValue}`)\n    logger.info(`estimated total purchase cost: ${totalPurchaseCost}`)\n    logger.info(`estimated gross profit: ${estimatedGrossProfit}`)\n    logger.info(`estimated transaction fees: ${estimatedTransactionFees}`)\n    logger.info(`estimated net profit: ${estimatedNetProfit}`)\n\n    positionChange= {\n      takeProfit: 'gemini',\n      gemini: {\n        action: 'sell',\n        quantity: ethereumTradingQuantity,\n        units: 'eth',\n        rate: bidPriceGemini\n      },\n      gdax : {\n        action: 'buy',\n        quantity: ethereumTradingQuantity,\n        units: 'eth',\n        rate: askPriceGdax\n      }\n    }\n  } else {\n    positionChange = 'none'\n    return positionChange\n  }\n\n  let exchangeWithEthereumBalance = await determineCurrentEthereumPosition()\n\n  if(positionChange[exchangeWithEthereumBalance].action == 'sell'){\n    return positionChange\n  } else {\n    return 'none'\n  }\n}\n\nasync function execute(positionChange){\n\n  let tradeResults = await Promise.all([gdaxService.executeTrade(positionChange), geminiService.executeTrade(positionChange)])\n  //let tradeResults = await Promise.all([gdaxService.executeTrade(positionChange)])\n\n  let tradeLog = {\n    gdax: tradeResults[0],\n    gemini: tradeResults[1],\n    takeProfit: positionChange.takeProfit\n  }\n\n  return tradeLog\n}\n\nasync function determineCurrentEthereumPosition(){\n\n  // determine gemini ethereum balance\n  let currentGeminiBalances = await geminiService.availableBalances()\n  \n  let geminiUsdBalance = currentGeminiBalances.filter(accountDetails => accountDetails.currency == 'USD')\n  geminiUsdBalance = parseFloat(geminiUsdBalance[0].amount)\n\n  let geminiEthBalance = currentGeminiBalances.filter(accountDetails => accountDetails.currency == 'ETH')\n  geminiEthBalance = parseFloat(geminiEthBalance[0].amount)\n\n  // determine gdax ethereum balance\n  let currentGdaxBalances = await gdaxService.availableBalances()\n  \n  let gdaxUsdBalance = currentGdaxBalances.filter((accountDetails) => accountDetails.currency == 'USD')\n  gdaxUsdBalance = parseFloat(gdaxUsdBalance[0].balance)\n\n  let gdaxEthBalance = currentGdaxBalances.filter((accountDetails) => accountDetails.currency == 'ETH')\n  gdaxEthBalance = parseFloat(gdaxEthBalance[0].balance)\n\n  logger.info(`geminiEthBalance: ${geminiEthBalance}`)\n  logger.info(`geminiUsdBalance: ${geminiUsdBalance}`)\n  logger.info(`gdaxEthBalance: ${gdaxEthBalance}`)\n  logger.info(`gdaxUsdBalance: ${gdaxUsdBalance}`)\n\n  let ethereumBalance\n  if(geminiEthBalance > gdaxEthBalance){\n    ethereumBalance = 'gemini'\n  } else if (gdaxEthBalance > geminiEthBalance){\n    ethereumBalance = 'gdax'\n  }\n\n  logger.info(`ethereum balance is in ${ethereumBalance}`)\n\n  return ethereumBalance\n}\n\nfunction calculateBidPrice(bids, ethereumTradingQuantity){\n\n  // let priceLevel = bids.find((bid) => {\n  //   return parseFloat(bid.amount) >= ethereumTradingQuantity\n  // })\n  let priceLevel = bids[0]\n\n  return priceLevel ? parseFloat(priceLevel.price) : 'no match found'\n}\n\nfunction calculateAskPrice(asks, ethereumTradingQuantity){\n\n  // let priceLevel = asks.find((ask) => {\n  //   return parseFloat(ask.amount) >= ethereumTradingQuantity\n  // })\n  let priceLevel = asks[0]\n\n  return priceLevel ? parseFloat(priceLevel.price) : 'no match found'\n}\n\n"]}